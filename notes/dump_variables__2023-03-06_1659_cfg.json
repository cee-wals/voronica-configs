printer['webhooks'].state = ready
printer['webhooks'].state_message = Printer is ready
printer['configfile'].config = {'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': '\nCANCEL_PRINT'}, 'pause_resume': {}, 'display_status': {}, 'gcode_macro CANCEL_PRINT': {'description': 'Cancel the actual running print', 'rename_existing': 'BASE_CANCEL_PRINT', 'variable_park': 'True', 'gcode': '\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT'}, 'gcode_macro PAUSE': {'description': 'Pause the actual running print', 'rename_existing': 'BASE_PAUSE', 'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=43200\n{% endif %}'}, 'gcode_macro RESUME': {'description': 'Resume the actual running print', 'rename_existing': 'BASE_RESUME', 'gcode': '\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 1 %}\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1\nRESETRGB\nSET_LOGO_LEDS_BY_NAME COLOR="WHITE"\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM109 S{etemp|int}\n{% endif %}\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\n{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}\nG1 Z{zhop * -1} E{e} F900\n{% else %}\nG1 Z{zhop * -1} F900\n{% endif %}\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100\nBASE_RESUME\n{% endif %}', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL': {'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_retract_extrude': '10.0', 'variable_extrude_extrude': '11.0', 'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{retract_extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}'}, 'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_3500330011504B4633373520-if00'}, 'printer': {'kinematics': 'corexy', 'max_velocity': '500', 'max_accel': '3900', 'max_z_velocity': '30', 'max_z_accel': '350', 'square_corner_velocity': '5.0'}, 'temperature_sensor MCU': {'sensor_type': 'temperature_mcu'}, 'temperature_sensor SoC': {'sensor_type': 'temperature_host'}, 'stepper_x': {'step_pin': 'PE2', 'dir_pin': 'PB4', 'enable_pin': '!PC11', 'microsteps': '32', 'rotation_distance': '40', 'full_steps_per_rotation': '400', 'endstop_pin': '^PF3', 'position_min': '0', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_y': {'step_pin': 'PF12', 'dir_pin': 'PF11', 'enable_pin': '!PB3', 'microsteps': '32', 'rotation_distance': '40', 'full_steps_per_rotation': '400', 'endstop_pin': '^PF4', 'position_min': '-5', 'position_endstop': '350', 'position_max': '350', 'homing_speed': '25', 'homing_retract_dist': '5', 'homing_positive_dir': 'true'}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'stepper_z': {'step_pin': 'PD3', 'dir_pin': 'PD2', 'enable_pin': '!PD5', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '32', 'endstop_pin': 'probe:z_virtual_endstop', 'position_max': '340', 'position_min': '-5', 'homing_speed': '8', 'second_homing_speed': '3', 'homing_retract_dist': '3'}, 'tmc2209 stepper_z': {'uart_pin': 'PD4', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '99999999'}, 'stepper_z1': {'step_pin': 'PC9', 'dir_pin': '!PC8', 'enable_pin': '!PD1', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '32'}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '99999999'}, 'stepper_z2': {'step_pin': 'PA10', 'dir_pin': 'PD15', 'enable_pin': '!PA15', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '16'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF8', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '99999999'}, 'stepper_z3': {'step_pin': 'PD12', 'dir_pin': '!PD11', 'enable_pin': '!PD14', 'rotation_distance': '40', 'gear_ratio': '80:16', 'microsteps': '32'}, 'tmc2209 stepper_z3': {'uart_pin': 'PD13', 'interpolate': 'False', 'run_current': '0.8', 'sense_resistor': '0.110', 'stealthchop_threshold': '99999999'}, 'extruder': {'step_pin': 'PD7', 'dir_pin': 'PD6', 'enable_pin': '!PF10', 'rotation_distance': '22.21346563', 'gear_ratio': '50:10', 'microsteps': '32', 'full_steps_per_rotation': '200', 'nozzle_diameter': '0.400', 'filament_diameter': '1.75', 'heater_pin': 'PE3', 'control': 'pid', 'pid_kp': '20.359', 'pid_ki': '1.635', 'pid_kd': '63.366', 'pullup_resistor': '2200', 'sensor_type': 'PT1000', 'sensor_pin': 'PA1', 'min_temp': '10', 'max_temp': '290', 'max_power': '1.0', 'min_extrude_temp': '170', 'pressure_advance': '0.05', 'pressure_advance_smooth_time': '0.040'}, 'tmc2209 extruder': {'uart_pin': 'PF9', 'interpolate': 'false', 'run_current': '0.7', 'sense_resistor': '0.110', 'stealthchop_threshold': '0'}, 'filament_motion_sensor SFS_T0': {'detection_length': '10.00', 'extruder': 'extruder', 'switch_pin': 'PC5', 'pause_on_runout': 'True', 'runout_gcode': '\n\nM117 Runout Detected!\n\nSET_LOGO_LEDS_BY_NAME COLOR="YELLOW"\nBEEP I=12'}, 'heater_bed': {'heater_pin': 'PB5', 'sensor_type': 'NTC 100K MGB18-104F39050L32', 'sensor_pin': 'PA0', 'max_power': '0.9', 'min_temp': '0', 'max_temp': '120', 'control': 'pid', 'pid_kp': '48.140', 'pid_ki': '1.207', 'pid_kd': '480.198'}, 'probe': {'pin': 'PF5', 'x_offset': '0', 'y_offset': '0', 'speed': '10.0', 'samples': '3', 'samples_result': 'median', 'sample_retract_dist': '3.0', 'samples_tolerance': '0.006', 'samples_tolerance_retries': '3', 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'z_offset': '-0.465'}, 'fan': {'pin': 'PE6', 'kick_start_time': '0.5', 'off_below': '0.10'}, 'heater_fan hotend_fan': {'pin': 'PE0', 'max_power': '1.0', 'kick_start_time': '0.5', 'heater': 'extruder', 'heater_temp': '50.0'}, 'heater_fan controller_fan': {'pin': 'PC12', 'max_power': '1.0', 'fan_speed': '0.3', 'shutdown_speed': '1.0', 'kick_start_time': '0.5', 'heater': 'heater_bed', 'heater_temp': '45.0'}, 'idle_timeout': {'timeout': '7200', 'gcode': '\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z5 F18000.0\nG90\nG1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F18000.0\n{% endif %}\nOFF'}, 'safe_z_home': {'home_xy_position': '175,175', 'speed': '100', 'z_hop': '10'}, 'quad_gantry_level': {'gantry_corners': '\n-60,-10\n410,420', 'points': '\n50,25\n50,275\n300,275\n300,25', 'speed': '400', 'horizontal_move_z': '10', 'retries': '5', 'retry_tolerance': '0.0075', 'max_adjust': '10'}, 'bed_mesh': {'speed': '300', 'mesh_min': '25,25', 'mesh_max': '335,335', 'horizontal_move_z': '5', 'probe_count': '7,7', 'relative_reference_index': '24', 'algorithm': 'bicubic'}, 'board_pins': {'aliases': '\n\nEXP1_1=PE9, EXP1_2=PE10,\nEXP1_3=PE11, EXP1_4=PE12,\nEXP1_5=PE13, EXP1_6=PE14,\nEXP1_7=PE15, EXP1_8=PB10,\nEXP1_9=, EXP1_10=<5V>,\n\n\nEXP2_1=PB14, EXP2_2=PB13,\nEXP2_3=PF7, EXP2_4=PB12,\nEXP2_5=PE7, EXP2_6=PB11,\nEXP2_7=PE8, EXP2_8=,\nEXP2_9=, EXP2_10=PC5'}, 'display': {'display_group': '__voron_display', 'lcd_type': 'uc1701', 'cs_pin': 'EXP1_3', 'a0_pin': 'EXP1_4', 'rst_pin': 'EXP1_5', 'encoder_pins': '^EXP2_5, ^EXP2_3', 'click_pin': '^!EXP1_2', 'contrast': '63', 'spi_software_miso_pin': 'EXP2_1', 'spi_software_mosi_pin': 'EXP2_6', 'spi_software_sclk_pin': 'EXP2_2'}, 'neopixel btt_mini12864': {'pin': 'EXP1_6', 'chain_count': '3', 'initial_red': '0.1', 'initial_green': '0.5', 'initial_blue': '0.0', 'color_order': 'RGB'}, 'output_pin beeper': {'pin': 'EXP1_1', 'value': '0', 'shutdown_value': '0', 'pwm': 'True', 'cycle_time': '0.0005'}, 'exclude_object': {}, 'respond': {}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'gcode_macro PRINT_START': {'variable_bedtemp': '0', 'variable_extrudertemp': '0', 'gcode': '\n\n{% set bed = params.BED|default(60)|int %}\n{% set extruder = params.EXTRUDER|default(150)|int %}\n\n\n\nSET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}\nSET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extrudertemp VALUE={extruder}\n\n\n\nSETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1\n\nCLEAR_PAUSE\nUPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0\n\n_RESETSPEEDS\nRESETRGB\nSET_NOZZLE_LEDS_BY_NAME COLOR="WHITE"\nSET_LOGO_LEDS_BY_NAME COLOR="WHITE"\n\nM140 S{bed}\nG28\nG90\n\n\n\n\n\n\nM190 S{bed}\nSET_LOGO_LEDS_BY_NAME COLOR="WHITE"\nQUAD_GANTRY_LEVEL\nLEVEL_BED_ADVANCED MAX_AGE=10\nM104 S{extruder}\nM109 S{extruder}\nG28 Z\n\n\nVORON_PURGE\n\nG92 E0\nG1 Z2.0 F3000\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1'}, 'gcode_macro PRINT_END': {'gcode': '\nRESETRGB\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0\nCLEAR_PAUSE\n\nM400\nG92 E0\n\n\nG1 E-10.0 F3600\n\n\n\nM104 S0\nM140 S{printer["gcode_macro PRINT_START"].bedtemp|int}\n\nM107\nG91\nG1 Z5 F3000\nG90\nG1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0\nUPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600\n_RESETSPEEDS\nSAVE_IF_SET\nSET_NOZZLE_LEDS_BY_NAME COLOR="OFF"\nM84'}, 'delayed_gcode DELAYED_OFF': {'gcode': '\nOFF'}, 'gcode_macro LEVEL_BED_ADVANCED': {'description': 'Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE', 'variable_save_at_end': '0', 'gcode': '\n{% set max_age = params.MAX_AGE|default(10)|int %}\n{% set force_level = params.FORCE|default(0)|int %}\n{% set save = params.SAVE|default(0)|int %}\n\n{% set svv = printer.save_variables.variables %}\n{% if "level_age" not in svv %}\nSAVE_VARIABLE VARIABLE=level_age VALUE={max_age}\n{% set level_age = 1 %}\n{% else %}\n{% set level_age = svv.level_age %}\nSAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}\n{% endif %}\n{action_respond_info("Bed mesh age is " + level_age|string) + "."}\n\n{% if force_level or (level_age >= max_age|int) %}\n{action_respond_info("Bed mesh exceeded max age. Leveling...")}\n\n{% if \'xy\' not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nBED_MESH_CALIBRATE\n{% if save %}\nSAVE_VARIABLE VARIABLE=level_age VALUE=1\nSAVE_CONFIG\n{% else %}\nSET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1\n{% endif %}\n{% else %}\n{action_respond_info("Loading old bed mesh.")}\nBED_MESH_PROFILE LOAD=default\n{% endif %}'}, 'gcode_macro SAVE_IF_SET': {'gcode': '\n{% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}\n{action_respond_info("Saving was requested - saving and restarting now.")}\nSAVE_VARIABLE VARIABLE=level_age VALUE=1\nSAVE_CONFIG\n{% endif %}'}, 'gcode_macro M600': {'gcode': '\n\nSET_LOGO_LEDS_BY_NAME COLOR="YELLOW"\nPAUSE'}, 'delayed_gcode DISABLEFILAMENTSENSOR': {'initial_duration': '1', 'gcode': '\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0'}, 'gcode_macro SHUTDOWN': {'gcode': '\n\nOFF\n{action_respond_info(\'action:poweroff\')}\n{action_call_remote_method("shutdown_machine")}'}, 'gcode_macro HEATSOAK': {'gcode': '\n\n{% set t = params.T|default(110)|int %}\n{% set c = params.C|default(75)|int %}\n{% set move = params.MOVE|default(1)|int %}\n{% set wait = params.WAIT|default(0)|int %}\n\nSAVE_GCODE_STATE NAME=HEATSOAK\nUPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0\n\nM104 S0\nM140 S{t}\n\n{% if move == 1 %}\nSET_LOGO_LEDS_BY_NAME COLOR=ORANGE\n_CG28\nG90\nG0 Z{printer.toolhead.axis_maximum.z/2} F19500\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500\n{% endif %}\n\n\n\n\nRESTORE_GCODE_STATE NAME=HEATSOAK'}, 'gcode_macro _RESETSPEEDS': {'gcode': '\nSET_VELOCITY_LIMIT VELOCITY={printer.toolhead.max_velocity}\nSET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.toolhead.max_accel_to_decel}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.toolhead.square_corner_velocity}'}, 'gcode_macro G32': {'gcode': '\n\nG28\nQUAD_GANTRY_LEVEL\nG28 Z\nG90\n\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z30 F3600'}, 'gcode_macro BEEP': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}'}, 'delayed_gcode SETSBRGB': {'initial_duration': '1', 'gcode': '\nSET_LOGO_LEDS_BY_NAME COLOR="WHITE"'}, 'delayed_gcode SETDISPLAYNEOPIXEL': {'initial_duration': '1', 'gcode': '\nRESETRGB'}, 'gcode_macro RESETRGB': {'gcode': '\n\n\nSET_LED LED=btt_mini12864 RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0\nSET_LED LED=btt_mini12864 RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0\nSET_LED LED=btt_mini12864 RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3'}, 'gcode_macro SFS_ENABLE': {'description': 'Enable smart filament sensor', 'gcode': '\nM117 ENABLING the SFS\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1'}, 'gcode_macro SFS_DISABLE': {'description': 'Disable smart filament sensor', 'gcode': '\nM117 DISABLING the SFS\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0'}, 'gcode_macro UNLOAD_FILAMENT': {'gcode': '\nSAVE_GCODE_STATE NAME=UNLOADFILAMENT\nM83\nG1 E10 F600\nG1 E-120 F1800\nRESTORE_GCODE_STATE NAME=UNLOADFILAMENT'}, 'gcode_macro LOAD_FILAMENT': {'gcode': '\nSAVE_GCODE_STATE NAME=LOADFILAMENT\nM83\nG1 E100 F600\nRESTORE_GCODE_STATE NAME=LOADFILAMENT'}, 'gcode_macro HOT_UNLOAD': {'gcode': '\n\n{% set t = params.T|default(255)|int %}\n\nM104 S{t}\nPARKFRONT\nM109 S{t}\nUNLOAD_FILAMENT'}, 'gcode_macro HOT_LOAD': {'gcode': '\n\n{% set t = params.T|default(255)|int %}\n\nM104 S{t}\nPARKFRONT\nM109 S{t}\nLOAD_FILAMENT'}, 'gcode_macro _CG28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}'}, 'gcode_macro _CQGL': {'gcode': '\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}'}, 'gcode_macro PARKFRONT': {'gcode': '\n_CG28\nSAVE_GCODE_STATE NAME=PARKFRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500\nRESTORE_GCODE_STATE NAME=PARKFRONT'}, 'gcode_macro PARKFRONTLOW': {'gcode': '\n_CG28\nSAVE_GCODE_STATE NAME=PARKFRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500\nRESTORE_GCODE_STATE NAME=PARKFRONT'}, 'gcode_macro PARKREAR': {'gcode': '\n_CG28\nSAVE_GCODE_STATE NAME=PARKREAR\nG90\nG0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500\nRESTORE_GCODE_STATE NAME=PARKREAR'}, 'gcode_macro PARKCENTER': {'gcode': '\n_CG28\nSAVE_GCODE_STATE NAME=PARKCENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500\nRESTORE_GCODE_STATE NAME=PARKCENTER'}, 'gcode_macro PARKBED': {'gcode': '\n_CG28\nSAVE_GCODE_STATE NAME=PARKBED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500\nRESTORE_GCODE_STATE NAME=PARKBED'}, 'gcode_macro OFF': {'gcode': '\nM84\nTURN_OFF_HEATERS\n\nM107\n\nSET_NOZZLE_LEDS_BY_NAME COLOR="OFF"\nSET_LOGO_LEDS_BY_NAME COLOR="WHITE"'}, 'gcode_macro DUMP_VARIABLES': {'gcode': '\n{% set filter_name = params.NAME|default(\'\')|string|lower %}\n{% set filter_value = params.VALUE|default(\'\')|string|lower %}\n{% set show_cfg = params.SHOW_CFG|default(0)|int %}\n\n{% set out = [] %}\n\n{% for key1 in printer %}\n{% for key2 in printer[key1] %}\n{% if (show_cfg or not (key1|lower == \'configfile\' and key2|lower in [\'config\', \'settings\'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}\n{% set dummy = out.append("printer[\'%s\'].%s = %s" % (key1, key2, printer[key1][key2])) %}\n{% endif %}\n{% else %}\n{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}\n{% set dummy = out.append("printer[\'%s\'] = %s" % (key1, printer[key1])) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n{action_respond_info(out|join("\\n"))}'}, 'gcode_macro GET_VARIABLE': {'gcode': '\n{% set names = (params.NAME).split(\'.\')|list %}\n{% set join = (params.JOIN)|default(1)|int %}\n\n{% set _dummy0 = namespace( break = 0 ) %}\n{% set _dummy1 = namespace( out = printer[names|first] ) %}\n\n{% for name in names if _dummy0.break == 0 %}\n{% if loop.index > 1 %}\n{% if name in _dummy1.out %}\n{% set _dummy1.out = _dummy1.out[name] %}\n{% elif name[0] in \'0123456789\' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}\n{% set _dummy1.out = _dummy1.out[name|int] %}\n{% else %}\n{% set _dummy0.break = loop.index0 %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if _dummy1.out is boolean %}\n{ action_respond_info(\'Type: boolean\') }\n{% elif _dummy1.out is float %}\n{ action_respond_info(\'Type: float\') }\n{% elif _dummy1.out is integer %}\n{ action_respond_info(\'Type: integer\') }\n{% elif _dummy1.out is mapping %}\n{ action_respond_info(\'Type: mapping\') }\n{% elif _dummy1.out is string %}\n{ action_respond_info(\'Type: string\') }\n{% elif _dummy1.out is iterable %}\n{ action_respond_info(\'Type: iterable\') }\n{% elif _dummy1.out is none %}\n{ action_respond_info(\'Type: none\') }\n{% elif _dummy1.out is undefined %}\n{ action_respond_info(\'Type: undefined\') }\n{% elif _dummy1.out is callable %}\n{ action_respond_info(\'Type: callable\') }\n{% else %}\n{ action_respond_info(\'Type: unknown\') }\n{% endif %}\n\n{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}\n{ action_respond_info(\'%s\' % _dummy1.out|join("\\n")) }\n{% else %}\n{ action_respond_info(\'%s\' % _dummy1.out) }\n{% endif %}\n\n{% if _dummy0.break != 0 %}\n{ action_respond_info(\'"printer.%s" does not contain "%s"!\' % (names[0:_dummy0.break]|join(\'.\'), names[_dummy0.break])) }\n{% endif %}'}, 'gcode_macro BACKUP_CFG': {'gcode': '\nRUN_SHELL_COMMAND CMD=backup_cfg'}, 'gcode_shell_command backup_cfg': {'command': 'sh /home/biqu/printer_data/config/scripts/gitbackup.sh', 'timeout': '30.', 'verbose': 'True'}, 'gcode_macro SHAPER_CAL': {'gcode': '\nRUN_SHELL_COMMAND CMD=rem_res_data\nSHAPER_CALIBRATE AXIS=X FREQ_END=100\nSHAPER_CALIBRATE AXIS=Y FREQ_END=100\nRUN_SHELL_COMMAND CMD=gen_res_graph\nSAVE_CONFIG'}, 'gcode_shell_command rem_res_data': {'command': 'sh /home/biqu/printer_data/config/scripts/rem_res_data.sh', 'timeout': '30.', 'verbose': 'True'}, 'gcode_shell_command gen_res_graph': {'command': 'sh /home/biqu/printer_data/config/scripts/gen_res_graph.sh', 'timeout': '30.', 'verbose': 'True'}, 'gcode_macro VORON_PURGE': {'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_tip_distance': '10', 'variable_purge_amount': '40', 'variable_flow_rate': '10', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_size': '10', 'variable_distance_to_object_x': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True', 'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable)) }\n{ action_respond_info("z_height : %f" % (z_height)) }\n{ action_respond_info("tip_distance : %f" % (tip_distance)) }\n{ action_respond_info("purge_amount : %f" % (purge_amount)) }\n{ action_respond_info("flow_rate : %f" % (flow_rate)) }\n{ action_respond_info("x_default : %f" % (x_default)) }\n{ action_respond_info("y_default : %f" % (y_default)) }\n{ action_respond_info("size : %f" % (size)) }\n{ action_respond_info("distance_to_object_x : %f" % (distance_to_object_x)) }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y)) }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}\n{% set prepurge_speed = flow_rate / 2.405 %}\n{% set travel_speed = printer.toolhead.max_velocity %}\n{ action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }\n\nG92 E0\nG0 F{travel_speed*60}\nG90\nG0 X{x_origin} Y{y_origin+size/2}\nG0 Z{z_height}\nM83\nG1 E{tip_distance} F{prepurge_speed*60}\nG1 X{x_origin+size*0.289} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60}\nG1 E-.5 F2100\nG0 Z{z_height*2}\nG0 X{x_origin+size*0.789} Y{y_origin+size}\nG0 Z{z_height}\nG1 E.5 F2100\nG1 X{x_origin+size*0.211} Y{y_origin} E{purge_amount/2} F{purge_move_speed*60}\nG1 E-.5 F2100\nG0 Z{z_height*2}\nG0 X{x_origin+size*0.711} Y{y_origin}\nG0 Z{z_height}\nG1 E.5 F2100\nG1 X{x_origin+size} Y{y_origin+size/2} E{purge_amount/4} F{purge_move_speed*60}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height*2}'}, 'gcode_macro SETUP_VORON_PURGE': {'gcode': '\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=display_parameters VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=adaptive_enable VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=z_height VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=tip_distance VALUE={params.TIP_DISTANCE|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=purge_amount VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=flow_rate VALUE={params.FLOW_RATE|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=x_default VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=y_default VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=size VALUE={params.SIZE|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=distance_to_object_x VALUE={params.DISTANCE_TO_OBJECT_X|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=distance_to_object_y VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}'}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': '0.01', 'realtime': 'True', 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1"}, 'menu __main __filament __hotloadf': {'type': 'input', 'name': 'H load: {menu.input}', 'input': '230', 'input_min': '180', 'input_max': '300', 'input_step': '10', 'gcode': '\nHOT_LOAD T={menu.input}'}, 'menu __main __filament __hotunloadf': {'type': 'input', 'name': 'H unload: {menu.input}', 'input': '230', 'input_min': '180', 'input_max': '300', 'input_step': '10', 'gcode': '\nHOT_UNLOAD T={menu.input}'}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Filament', 'gcode': '\nLOAD_FILAMENT'}, 'menu __main __filament __loads': {'type': 'disabled'}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Filament', 'gcode': '\nUNLOAD_FILAMENT'}, 'menu __main __filament __unloads': {'type': 'disabled'}, 'menu __main __filament __feedfast': {'type': 'input', 'name': "Feed fast: {'%.1f' % menu.input}", 'input': '10', 'input_step': '10', 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F300\nRESTORE_GCODE_STATE NAME=__filament__load"}, 'menu __main __control __G32': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'G32', 'gcode': 'G32'}, 'menu __main __control __QGL': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'QGL', 'gcode': 'QUAD_GANTRY_LEVEL'}, 'menu __main __control __mesh': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Mesh', 'gcode': 'BED_MESH_CALIBRATE'}, 'menu __main __control __qglmesh': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'QGL & Mesh', 'gcode': '\nQUAD_GANTRY_LEVEL\nBED_MESH_CALIBRATE'}, 'menu __main __control __parkfront': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Park front', 'gcode': 'PARKFRONT'}, 'menu __main __control __parkfrontlow': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Park front low', 'gcode': 'PARKFRONTLOW'}, 'menu __main __control __parkrear': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Park rear', 'gcode': 'PARKREAR'}, 'menu __main __control __parkcenter': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Park center', 'gcode': 'PARKCENTER'}, 'menu __main __control __parkbed': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Park bed', 'gcode': 'PARKBED'}, 'menu __main __control __off': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'OFF', 'gcode': 'OFF'}, 'menu __main __temp __heatsoak': {'type': 'input', 'name': 'Heatsoak: {menu.input}', 'input': '110', 'input_min': '80', 'input_max': '110', 'input_step': '10', 'gcode': '\nHEATSOAK T={menu.input}'}, 'menu __main __setup __shutdown': {'type': 'command', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'name': 'Shut down', 'gcode': 'SHUTDOWN'}, 'display_glyph chamber': {'data': '\n................\n****************\n*....*....*....*\n*....*....*....*\n*....******....*\n*..............*\n*..............*\n*.....****.....*\n*.***.*..*.***.*\n*.....****.....*\n*......**......*\n*..............*\n*.************.*\n*...*......*...*\n****************\n................'}, 'display_glyph voron': {'data': '\n......***.......\n....*******.....\n...*********....\n.*************..\n*****..***..***.\n****..***..****.\n***..***..*****.\n**..***..******.\n******..***..**.\n*****..***..***.\n****..***..****.\n***..***..*****.\n.*************..\n...*********....\n....*******.....\n......***.......'}, 'display_template _vheater_temperature': {'param_heater_name': '"extruder"', 'text': '\n{% if param_heater_name in printer %}\n{% set heater = printer[param_heater_name] %}\n\n{% if param_heater_name == "heater_bed" %}\n{% if heater.target %}\n{% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}\n~bed_heat{frame}~\n{% else %}\n~bed~\n{% endif %}\n{% else %}\n~extruder~\n{% endif %}\n\n{ "%3.0f" % (heater.temperature,) }\n\n{% if heater.target and (heater.temperature - heater.target)|abs > 2 %}\n~right_arrow~\n{ "%0.0f" % (heater.target,) }\n{% endif %}\n~degrees~\n{% endif %}'}, 'display_data __voron_display extruder': {'position': '0, 0', 'text': '{ render("_vheater_temperature", param_heater_name="extruder") }'}, 'display_data __voron_display fan': {'position': '0, 10', 'text': '\n{% if \'fan\' in printer %}\n{% set speed = printer.fan.speed %}\n{% if speed %}\n{% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}\n~fan{frame}~\n{% else %}\n~fan1~\n{% endif %}\n{ "{:>4.0%}".format(speed) }\n{% endif %}'}, 'display_data __voron_display bed': {'position': '1, 0', 'text': '{ render("_vheater_temperature", param_heater_name="heater_bed") }'}, 'display_data __voron_display progress_text': {'position': '1, 10', 'text': '\n{% set progress = printer.display_status.progress %}\n{ "{:^6.0%}".format(progress) }'}, 'display_data __voron_display progress_text2': {'position': '1, 10', 'text': '\n{% set progress = printer.display_status.progress %}\n{ draw_progress_bar(1, 10, 6, progress) }'}, 'display_data __voron_display printing_time': {'position': '2, 10', 'text': '\n{% set ptime = printer.idle_timeout.printing_time %}\n{ "%02d:%02d" % (ptime (60 * 60), (ptime 60) % 60) }'}, 'display_data __voron_display print_status': {'position': '3, 0', 'text': '\n{% if printer.display_status.message %}\n{ printer.display_status.message }\n{% elif printer.idle_timeout.printing_time %}\n{% set pos = printer.toolhead.position %}\n{ "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }\n{% else %}\n{ "V2.247 " }\n~voron~\n{% endif %}'}, 'neopixel sb_leds': {'pin': 'PC6', 'chain_count': '3', 'color_order': 'GRBW', 'initial_red': '1.0', 'initial_green': '0.0', 'initial_blue': '0.0', 'initial_white': '0.0'}, 'gcode_macro _SB_VARS': {'variable_colors': "{\n'white': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 1.0},\n'red': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'orange': {'r': 1.0, 'g': 0.25, 'b': 0.0, 'w': 0.0},\n'yellow': {'r': 1.0, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'green': {'r': 0.0, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'blue': {'r': 0.0, 'g': 0.0, 'b': 1.0, 'w': 0.0},\n'purple': {'r': 0.5, 'g': 0.0, 'b': 1.0, 'w': 0.0},\n'pink': {'r': 1.0, 'g': 0.0, 'b': 0.5, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"', 'gcode': ''}, 'gcode_macro _SET_SB_LEDS': {'gcode': "\n{% set r = params.R|default(0)|float %}\n{% set g = params.G|default(0)|float %}\n{% set b = params.B|default(0)|float %}\n{% set w = params.W|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nSET_LED LED={led} RED={r} GREEN={g} BLUE={b} WHITE={w} INDEX={led_index} TRANSMIT={transmit}\n{% endfor %}"}, 'gcode_macro SET_LOGO_LEDS_BY_NAME': {'gcode': '\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _SB_VARS"].colors[color_name|lower] %}\n\n_SET_LOGO_LEDS R={color.r} G={color.g} B={color.b} W={color.w}'}, 'gcode_macro SET_NOZZLE_LEDS_BY_NAME': {'gcode': '\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _SB_VARS"].colors[color_name|lower] %}\n\n_SET_NOZZLE_LEDS R={color.r} G={color.g} B={color.b} W={color.w}'}, 'gcode_macro _SET_LOGO_LEDS': {'gcode': '\n{% set r = params.R|default(0)|float %}\n{% set g = params.G|default(0)|float %}\n{% set b = params.B|default(0)|float %}\n{% set w = params.W|default(0)|float %}\n{% set led = printer["gcode_macro _SB_VARS"].logo_led_name %}\n{% set idx = printer["gcode_macro _SB_VARS"].logo_idx %}\n\n_SET_SB_LEDS LED={led} R={r} G={g} B={b} W={w} IDX="{idx}"'}, 'gcode_macro _SET_NOZZLE_LEDS': {'gcode': '\n{% set r = params.R|default(0)|float %}\n{% set g = params.G|default(0)|float %}\n{% set b = params.B|default(0)|float %}\n{% set w = params.W|default(0)|float %}\n{% set led = printer["gcode_macro _SB_VARS"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _SB_VARS"].nozzle_idx %}\n\n_SET_SB_LEDS LED={led} R={r} G={g} B={b} W={w} IDX="{idx}"'}, 'gcode_macro LED_OFF': {'gcode': '\nSET_LED_TEMPLATE LED=sb_leds TEMPLATE=\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=0'}, 'gcode_macro LED_WHITE': {'gcode': '\nSET_LED_TEMPLATE LED=sb_leds TEMPLATE=\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1'}, 'gcode_macro LED_RED': {'gcode': '\nSET_LED_TEMPLATE LED=sb_leds TEMPLATE=\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0'}, 'gcode_macro LED_GREEN': {'gcode': '\nSET_LED_TEMPLATE LED=sb_leds TEMPLATE=\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0'}, 'gcode_macro LED_NIGHT': {'gcode': '\nSET_LED_TEMPLATE LED=sb_leds TEMPLATE=\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=0.1'}, 'gcode_macro LED_PROGRESS': {'gcode': '\nNEOPIXEL_DISPLAY LED="sb_leds" TYPE=print_percent MODE=glow'}, 'gcode_macro NEOPIXEL_DISPLAY': {'gcode': "\n{% set led = params.LED %}\n{% set type = params.TYPE %}\n{% set mode = params.MODE %}\n{% set my_neopixel = printer.configfile.config['neopixel ' ~ led] %}\n\n{% if mode == 'progress' %}\n{% for i in range(my_neopixel.chain_count|int) %}\nSET_LED_TEMPLATE LED={led} INDEX={i+1} TEMPLATE={'led_' ~ type ~ '_' ~ mode} param_led_num={i+1} param_led_total={my_neopixel.chain_count|int}\n{% endfor %}\n{% endif %}\n{% if mode == 'glow' %}\nSET_LED_TEMPLATE LED={led} TEMPLATE={'led_' ~ type ~ '_' ~ mode}\n{% endif %}"}, 'display_template led_extruder_temp_glow': {'text': '\n{% if printer.extruder.target > 0.0 %}\n{% set temp = printer.extruder.target %}\n{% else %}\n{% set temp = printer.configfile.config.extruder.max_temp %}\n{% endif %}\n{% set ratio = printer.extruder.temperature / temp|float %}\n{ratio}, 0.0, {1-ratio}, 0.0'}, 'display_template led_extruder_temp_progress': {'param_led_num': '0', 'param_led_total': '1', 'text': '\n{% if printer.extruder.target > 0.0 %}\n{% set temp = printer.extruder.target %}\n{% else %}\n{% set temp = printer.configfile.config.extruder.max_temp %}\n{% endif %}\n{% set ratio = printer.extruder.temperature / temp|float %}\n{% set led_ratio = param_led_num|float / param_led_total %}\n{% if ratio > led_ratio %}\n{led_ratio}, 0.0, 0.0, 0.0\n{% else %}\n0.0, 0.0, 0.0, 0.0\n{% endif %}'}, 'display_template led_bed_temp_glow': {'text': '\n{% if printer.heater_bed.target > 0.0 %}\n{% set temp = printer.heater_bed.target %}\n{% else %}\n{% set temp = printer.configfile.config.heater_bed.max_temp %}\n{% endif %}\n{% set ratio = printer.heater_bed.temperature / temp|float %}\n{ratio}, 0.0, {1-ratio}, 0.0'}, 'display_template led_bed_temp_progress': {'param_led_num': '0', 'param_led_total': '1', 'text': '\n{% if printer.heater_bed.target > 0.0 %}\n{% set temp = printer.heater_bed.target %}\n{% else %}\n{% set temp = printer.configfile.config.heater_bed.max_temp %}\n{% endif %}\n{% set ratio = printer.heater_bed.temperature / temp|float %}\n{% set led_ratio = param_led_num|float / param_led_total %}\n{% if ratio > led_ratio %}\n{led_ratio}, 0.0, 0.0, 0.0\n{% else %}\n0.0, 0.0, 0.0, 0.0\n{% endif %}'}, 'display_template led_print_percent_glow': {'text': '\n{% set ratio = printer.virtual_sdcard.progress %}\n0.0, {ratio}, 0.0, 0.0'}, 'display_template led_print_percent_progress': {'param_led_num': '0', 'param_led_total': '1', 'text': '\n{% set ratio = printer.virtual_sdcard.progress %}\n{% set led_ratio = param_led_num|float / param_led_total %}\n{% if ratio > led_ratio %}\n0.0, {led_ratio}, 0.0, 0.0\n{% else %}\n0.0, 0.0, 0.0, 0.0\n{% endif %}'}, 'display_template led_printer_speed_glow': {'text': '\n{% set ratio = printer.motion_report.live_velocity|float / printer.configfile.config.printer.max_velocity|float %}\n0.0, {ratio}, 0.0, 0.0'}, 'display_template led_printer_speed_progress': {'param_led_num': '0', 'param_led_total': '1', 'text': '\n{% set ratio = printer.motion_report.live_velocity|float / printer.configfile.config.printer.max_velocity|float %}\n{% set led_ratio = param_led_num|float / param_led_total %}\n{% if ratio > led_ratio %}\n0.0, {led_ratio}, 0.0, 0.0\n{% else %}\n0.0, 0.0, 0.0, 0.0\n{% endif %}'}, 'adxl345': {'cs_pin': 'PB15', 'spi_bus': 'spi1', 'axes_map': 'z,y,x'}, 'resonance_tester': {'accel_chip': 'adxl345', 'probe_points': '\n175, 175, 10'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'shaper_freq_x': '51.6', 'shaper_type_y': 'mzv', 'shaper_freq_y': '36.4'}, 'gcode_macro TEST_SPEED': {'gcode': '\n\n{% set speed = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED'}, 'bed_mesh default': {'version': '1', 'points': '\n0.015000, 0.028750, -0.033750, -0.036250, -0.037500, 0.017500, 0.020000\n0.047500, 0.016250, -0.003750, -0.030000, 0.003750, 0.026250, 0.041250\n0.038750, 0.031250, 0.001250, -0.017500, -0.026250, 0.013750, 0.018750\n0.065000, 0.027500, 0.006250, 0.000000, -0.010000, 0.031250, 0.025000\n0.075000, 0.045000, 0.040000, 0.007500, 0.036250, 0.043750, 0.041250\n0.067500, 0.060000, 0.047500, 0.028750, 0.062500, 0.078750, 0.038750\n0.091250, 0.093750, 0.072500, 0.065000, 0.090000, 0.097500, 0.111250', 'x_count': '7', 'y_count': '7', 'mesh_x_pps': '2', 'mesh_y_pps': '2', 'algo': 'bicubic', 'tension': '0.2', 'min_x': '25.0', 'max_x': '334.96', 'min_y': '25.0', 'max_y': '334.96'}}
printer['configfile'].settings = {'mcu': {'serial': '/dev/serial/by-id/usb-Klipper_stm32g0b1xx_3500330011504B4633373520-if00', 'baud': 250000, 'max_stepper_error': 2.5e-05}, 'virtual_sdcard': {'path': '~/printer_data/gcodes', 'on_error_gcode': '\nCANCEL_PRINT'}, 'pause_resume': {'recover_velocity': 50.0}, 'gcode_macro cancel_print': {'gcode': '\nCLEAR_PAUSE\nSDCARD_RESET_FILE\nPRINT_END\nBASE_CANCEL_PRINT', 'rename_existing': 'BASE_CANCEL_PRINT', 'description': 'Cancel the actual running print', 'variable_park': 'True'}, 'gcode_macro pause': {'gcode': '\n\n{% set z = params.Z|default(10)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 0 %}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer[\'extruder\'].target}\n\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0\nSAVE_GCODE_STATE NAME=PAUSE\nBASE_PAUSE\n{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}\nG91\nG1 Z{z} F900\n{% else %}\n{ action_respond_info("Pause zhop exceeds maximum Z height.") }\nSET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0\n{% endif %}\nG90\nG1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500\nSAVE_GCODE_STATE NAME=PAUSEPARK\nM104 S0\nSET_IDLE_TIMEOUT TIMEOUT=43200\n{% endif %}', 'rename_existing': 'BASE_PAUSE', 'description': 'Pause the actual running print'}, 'gcode_macro resume': {'gcode': '\n\n{% set e = params.E|default(2.5)|int %}\n\n{% if printer[\'pause_resume\'].is_paused|int == 1 %}\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1\nRESETRGB\nSET_LOGO_LEDS_BY_NAME COLOR="WHITE"\nSET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}\n{% if etemp > 0 %}\nM109 S{etemp|int}\n{% endif %}\nRESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100\nG91\nM83\n{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}\nG1 Z{zhop * -1} E{e} F900\n{% else %}\nG1 Z{zhop * -1} F900\n{% endif %}\nRESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=100\nBASE_RESUME\n{% endif %}', 'rename_existing': 'BASE_RESUME', 'description': 'Resume the actual running print', 'variable_zhop': '0', 'variable_etemp': '0'}, 'gcode_macro _toolhead_park_pause_cancel': {'gcode': '\n\n\n{% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}\n{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}\n{% set z_park_delta = 2.0 %}\n\n{% set max_z = printer.toolhead.axis_maximum.z|float %}\n{% set act_z = printer.toolhead.position.z|float %}\n{% if act_z < (max_z - z_park_delta) %}\n{% set z_safe = z_park_delta %}\n{% else %}\n{% set z_safe = max_z - act_z %}\n{% endif %}\n\n{% if printer.extruder.can_extrude|lower == \'true\' %}\nM83\nG1 E-{retract_extrude} F2100\n{% if printer.gcode_move.absolute_extrude |lower == \'true\' %} M82 {% endif %}\n{% else %}\n{action_respond_info("Extruder not hot enough")}\n{% endif %}\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z{z_safe} F900\nG90\nG1 X{x_park} Y{y_park} F6000\n{% if printer.gcode_move.absolute_coordinates|lower == \'false\' %} G91 {% endif %}\n{% else %}\n{action_respond_info("Printer not homed")}\n{% endif %}', 'description': 'Helper: park toolhead used in PAUSE and CANCEL_PRINT', 'variable_retract_extrude': '10.0', 'variable_extrude_extrude': '11.0'}, 'temperature_sensor mcu': {'sensor_type': 'temperature_mcu', 'sensor_mcu': 'mcu', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'temperature_sensor soc': {'sensor_type': 'temperature_host', 'sensor_path': '/sys/class/thermal/thermal_zone0/temp', 'min_temp': -273.15, 'max_temp': 99999999.9}, 'tmc2209 stepper_x': {'uart_pin': 'PC10', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_tpowerdown': 20, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_sgthrs': 0}, 'stepper_x': {'microsteps': 32, 'step_pin': 'PE2', 'dir_pin': 'PB4', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': (), 'enable_pin': '!PC11', 'endstop_pin': '^PF3', 'position_endstop': 350.0, 'position_min': 0.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_y': {'uart_pin': 'PF13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_tpowerdown': 20, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_sgthrs': 0}, 'stepper_y': {'microsteps': 32, 'step_pin': 'PF12', 'dir_pin': 'PF11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 400, 'gear_ratio': (), 'enable_pin': '!PB3', 'endstop_pin': '^PF4', 'position_endstop': 350.0, 'position_min': -5.0, 'position_max': 350.0, 'homing_speed': 25.0, 'second_homing_speed': 12.5, 'homing_retract_speed': 25.0, 'homing_retract_dist': 5.0, 'homing_positive_dir': True}, 'tmc2209 stepper_z': {'uart_pin': 'PD4', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 99999999.0, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_tpowerdown': 20, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_sgthrs': 0}, 'stepper_z': {'microsteps': 32, 'step_pin': 'PD3', 'dir_pin': 'PD2', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': ((80.0, 16.0),), 'enable_pin': '!PD5', 'endstop_pin': 'probe:z_virtual_endstop', 'position_min': -5.0, 'position_max': 340.0, 'homing_speed': 8.0, 'second_homing_speed': 3.0, 'homing_retract_speed': 8.0, 'homing_retract_dist': 3.0, 'homing_positive_dir': False}, 'tmc2209 stepper_z1': {'uart_pin': 'PD0', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 99999999.0, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_tpowerdown': 20, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_sgthrs': 0}, 'stepper_z1': {'microsteps': 32, 'step_pin': 'PC9', 'dir_pin': '!PC8', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': ((80.0, 16.0),), 'enable_pin': '!PD1'}, 'tmc2209 stepper_z2': {'uart_pin': 'PF8', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 99999999.0, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_tpowerdown': 20, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_sgthrs': 0}, 'stepper_z2': {'microsteps': 16, 'step_pin': 'PA10', 'dir_pin': 'PD15', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': ((80.0, 16.0),), 'enable_pin': '!PA15'}, 'tmc2209 stepper_z3': {'uart_pin': 'PD13', 'uart_address': 0, 'run_current': 0.8, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 99999999.0, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_tpowerdown': 20, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_sgthrs': 0}, 'stepper_z3': {'microsteps': 32, 'step_pin': 'PD12', 'dir_pin': '!PD11', 'rotation_distance': 40.0, 'full_steps_per_rotation': 200, 'gear_ratio': ((80.0, 16.0),), 'enable_pin': '!PD14'}, 'tmc2209 extruder': {'uart_pin': 'PF9', 'uart_address': 0, 'run_current': 0.7, 'hold_current': 2.0, 'sense_resistor': 0.11, 'interpolate': False, 'stealthchop_threshold': 0.0, 'driver_toff': 3, 'driver_hstrt': 5, 'driver_hend': 0, 'driver_tbl': 2, 'driver_iholddelay': 8, 'driver_tpowerdown': 20, 'driver_pwm_ofs': 36, 'driver_pwm_grad': 14, 'driver_pwm_freq': 1, 'driver_pwm_autoscale': True, 'driver_pwm_autograd': True, 'driver_pwm_reg': 8, 'driver_pwm_lim': 12, 'driver_sgthrs': 0}, 'extruder': {'microsteps': 32, 'sensor_type': 'PT1000', 'pullup_resistor': 2200.0, 'sensor_pin': 'PA1', 'min_temp': 10.0, 'max_temp': 290.0, 'min_extrude_temp': 170.0, 'max_power': 1.0, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 20.359, 'pid_ki': 1.635, 'pid_kd': 63.366, 'heater_pin': 'PE3', 'pwm_cycle_time': 0.1, 'nozzle_diameter': 0.4, 'filament_diameter': 1.75, 'max_extrude_cross_section': 0.6400000000000001, 'max_extrude_only_velocity': 133.04054018457214, 'max_extrude_only_accel': 1037.7162134396629, 'max_extrude_only_distance': 50.0, 'instantaneous_corner_velocity': 1.0, 'step_pin': 'PD7', 'pressure_advance': 0.05, 'pressure_advance_smooth_time': 0.04, 'dir_pin': 'PD6', 'rotation_distance': 22.21346563, 'full_steps_per_rotation': 200, 'gear_ratio': ((50.0, 10.0),), 'enable_pin': '!PF10'}, 'filament_motion_sensor sfs_t0': {'switch_pin': 'PC5', 'extruder': 'extruder', 'detection_length': 10.0, 'pause_on_runout': True, 'runout_gcode': '\n\nM117 Runout Detected!\n\nSET_LOGO_LEDS_BY_NAME COLOR="YELLOW"\nBEEP I=12', 'pause_delay': 0.5, 'event_delay': 3.0}, 'heater_bed': {'sensor_type': 'NTC 100K MGB18-104F39050L32', 'pullup_resistor': 4700.0, 'inline_resistor': 0.0, 'sensor_pin': 'PA0', 'min_temp': 0.0, 'max_temp': 120.0, 'min_extrude_temp': 170.0, 'max_power': 0.9, 'smooth_time': 1.0, 'control': 'pid', 'pid_kp': 48.14, 'pid_ki': 1.207, 'pid_kd': 480.198, 'heater_pin': 'PB5', 'pwm_cycle_time': 0.1}, 'verify_heater heater_bed': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 60.0}, 'probe': {'z_offset': -0.465, 'deactivate_on_each_sample': True, 'activate_gcode': "\n{% set PROBE_TEMP = 150 %}\n{% set MAX_TEMP = PROBE_TEMP + 5 %}\n{% set ACTUAL_TEMP = printer.extruder.temperature %}\n{% set TARGET_TEMP = printer.extruder.target %}\n\n{% if TARGET_TEMP > PROBE_TEMP %}\n{ action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }\nM109 S{ PROBE_TEMP }\n{% else %}\n\n{% if ACTUAL_TEMP > MAX_TEMP %}\n{ action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }\nTEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }\n{% endif %}\n{% endif %}", 'deactivate_gcode': '', 'pin': 'PF5', 'speed': 10.0, 'lift_speed': 10.0, 'x_offset': 0.0, 'y_offset': 0.0, 'samples': 3, 'sample_retract_dist': 3.0, 'samples_result': 'median', 'samples_tolerance': 0.006, 'samples_tolerance_retries': 3}, 'fan': {'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.1, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 0.0, 'pin': 'PE6'}, 'heater_fan hotend_fan': {'heater': ('extruder',), 'heater_temp': 50.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PE0', 'fan_speed': 1.0}, 'heater_fan controller_fan': {'heater': ('heater_bed',), 'heater_temp': 45.0, 'max_power': 1.0, 'kick_start_time': 0.5, 'off_below': 0.0, 'cycle_time': 0.01, 'hardware_pwm': False, 'shutdown_speed': 1.0, 'pin': 'PC12', 'fan_speed': 0.3}, 'idle_timeout': {'timeout': 7200.0, 'gcode': '\n{% if "xyz" in printer.toolhead.homed_axes %}\nG91\nG1 Z5 F18000.0\nG90\nG1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F18000.0\n{% endif %}\nOFF'}, 'safe_z_home': {'home_xy_position': (175.0, 175.0), 'z_hop': 10.0, 'z_hop_speed': 15.0, 'speed': 100.0, 'move_to_previous': False}, 'quad_gantry_level': {'retries': 5, 'retry_tolerance': 0.0075, 'max_adjust': 10.0, 'horizontal_move_z': 10.0, 'points': ((50.0, 25.0), (50.0, 275.0), (300.0, 275.0), (300.0, 25.0)), 'speed': 400.0, 'gantry_corners': ((-60.0, -10.0), (410.0, 420.0))}, 'bed_mesh': {'relative_reference_index': 24, 'probe_count': (7, 7), 'mesh_min': (25.0, 25.0), 'mesh_max': (335.0, 335.0), 'mesh_pps': (2, 2), 'algorithm': 'bicubic', 'bicubic_tension': 0.2, 'horizontal_move_z': 5.0, 'speed': 300.0, 'fade_start': 1.0, 'fade_end': 0.0, 'split_delta_z': 0.025, 'move_check_distance': 5.0}, 'bed_mesh default': {'version': 1, 'points': ((0.015, 0.02875, -0.03375, -0.03625, -0.0375, 0.0175, 0.02), (0.0475, 0.01625, -0.00375, -0.03, 0.00375, 0.02625, 0.04125), (0.03875, 0.03125, 0.00125, -0.0175, -0.02625, 0.01375, 0.01875), (0.065, 0.0275, 0.00625, 0.0, -0.01, 0.03125, 0.025), (0.075, 0.045, 0.04, 0.0075, 0.03625, 0.04375, 0.04125), (0.0675, 0.06, 0.0475, 0.02875, 0.0625, 0.07875, 0.03875), (0.09125, 0.09375, 0.0725, 0.065, 0.09, 0.0975, 0.11125)), 'min_x': 25.0, 'max_x': 334.96, 'min_y': 25.0, 'max_y': 334.96, 'x_count': 7, 'y_count': 7, 'mesh_x_pps': 2, 'mesh_y_pps': 2, 'algo': 'bicubic', 'tension': 0.2}, 'board_pins': {'mcu': ('mcu',), 'aliases': (('EXP1_1', 'PE9'), ('EXP1_2', 'PE10'), ('EXP1_3', 'PE11'), ('EXP1_4', 'PE12'), ('EXP1_5', 'PE13'), ('EXP1_6', 'PE14'), ('EXP1_7', 'PE15'), ('EXP1_8', 'PB10'), ('EXP1_9', ''), ('EXP1_10', '<5V>'), ('EXP2_1', 'PB14'), ('EXP2_2', 'PB13'), ('EXP2_3', 'PF7'), ('EXP2_4', 'PB12'), ('EXP2_5', 'PE7'), ('EXP2_6', 'PB11'), ('EXP2_7', 'PE8'), ('EXP2_8', ''), ('EXP2_9', ''), ('EXP2_10', 'PC5'))}, 'display': {'lcd_type': 'uc1701', 'cs_pin': 'EXP1_3', 'spi_speed': 10000000, 'spi_software_sclk_pin': 'EXP2_2', 'spi_software_miso_pin': 'EXP2_1', 'spi_software_mosi_pin': 'EXP2_6', 'a0_pin': 'EXP1_4', 'contrast': 63, 'rst_pin': 'EXP1_5', 'menu_root': '__main', 'menu_timeout': 0, 'menu_reverse_navigation': False, 'encoder_pins': '^EXP2_5, ^EXP2_3', 'encoder_steps_per_detent': 4, 'encoder_fast_rate': 0.03, 'click_pin': '^!EXP1_2', 'display_group': '__voron_display'}, 'menu __main __tune __offsetz': {'type': 'input', 'name': "Offset Z:{'%05.3f' % menu.input}", 'enable': True, 'gcode': "\nSET_GCODE_OFFSET Z={'%.3f' % menu.input} MOVE=1", 'realtime': True, 'input': '{printer.gcode_move.homing_origin.z}', 'input_min': '-5', 'input_max': '5', 'input_step': 0.01}, 'menu __main __filament __hotloadf': {'type': 'input', 'name': 'H load: {menu.input}', 'enable': True, 'gcode': '\nHOT_LOAD T={menu.input}', 'realtime': False, 'input': '230', 'input_min': '180', 'input_max': '300', 'input_step': 10.0}, 'menu __main __filament __hotunloadf': {'type': 'input', 'name': 'H unload: {menu.input}', 'enable': True, 'gcode': '\nHOT_UNLOAD T={menu.input}', 'realtime': False, 'input': '230', 'input_min': '180', 'input_max': '300', 'input_step': 10.0}, 'menu __main __filament __loadf': {'type': 'command', 'name': 'Load Filament', 'enable': True, 'gcode': '\nLOAD_FILAMENT'}, 'menu __main __filament __loads': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __filament __unloadf': {'type': 'command', 'name': 'Unload Filament', 'enable': True, 'gcode': '\nUNLOAD_FILAMENT'}, 'menu __main __filament __unloads': {'type': 'disabled', 'name': '', 'enable': True}, 'menu __main __filament __feedfast': {'type': 'input', 'name': "Feed fast: {'%.1f' % menu.input}", 'enable': True, 'gcode': "\nSAVE_GCODE_STATE NAME=__filament__load\nM83\nG1 E{'%.1f' % menu.input} F300\nRESTORE_GCODE_STATE NAME=__filament__load", 'realtime': False, 'input': '10', 'input_min': '-999999.0', 'input_max': '999999.0', 'input_step': 10.0}, 'menu __main __control __g32': {'type': 'command', 'name': 'G32', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'G32'}, 'menu __main __control __qgl': {'type': 'command', 'name': 'QGL', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'QUAD_GANTRY_LEVEL'}, 'menu __main __control __mesh': {'type': 'command', 'name': 'Mesh', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'BED_MESH_CALIBRATE'}, 'menu __main __control __qglmesh': {'type': 'command', 'name': 'QGL & Mesh', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': '\nQUAD_GANTRY_LEVEL\nBED_MESH_CALIBRATE'}, 'menu __main __control __parkfront': {'type': 'command', 'name': 'Park front', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PARKFRONT'}, 'menu __main __control __parkfrontlow': {'type': 'command', 'name': 'Park front low', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PARKFRONTLOW'}, 'menu __main __control __parkrear': {'type': 'command', 'name': 'Park rear', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PARKREAR'}, 'menu __main __control __parkcenter': {'type': 'command', 'name': 'Park center', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PARKCENTER'}, 'menu __main __control __parkbed': {'type': 'command', 'name': 'Park bed', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'PARKBED'}, 'menu __main __control __off': {'type': 'command', 'name': 'OFF', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'OFF'}, 'menu __main __temp __heatsoak': {'type': 'input', 'name': 'Heatsoak: {menu.input}', 'enable': True, 'gcode': '\nHEATSOAK T={menu.input}', 'realtime': False, 'input': '110', 'input_min': '80', 'input_max': '110', 'input_step': 10.0}, 'menu __main __setup __shutdown': {'type': 'command', 'name': 'Shut down', 'enable': '{not printer.idle_timeout.state == "Printing"}', 'gcode': 'SHUTDOWN'}, 'display_template _vheater_temperature': {'param_heater_name': '"extruder"', 'text': '\n{% if param_heater_name in printer %}\n{% set heater = printer[param_heater_name] %}\n\n{% if param_heater_name == "heater_bed" %}\n{% if heater.target %}\n{% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}\n~bed_heat{frame}~\n{% else %}\n~bed~\n{% endif %}\n{% else %}\n~extruder~\n{% endif %}\n\n{ "%3.0f" % (heater.temperature,) }\n\n{% if heater.target and (heater.temperature - heater.target)|abs > 2 %}\n~right_arrow~\n{ "%0.0f" % (heater.target,) }\n{% endif %}\n~degrees~\n{% endif %}'}, 'display_template led_extruder_temp_glow': {'text': '\n{% if printer.extruder.target > 0.0 %}\n{% set temp = printer.extruder.target %}\n{% else %}\n{% set temp = printer.configfile.config.extruder.max_temp %}\n{% endif %}\n{% set ratio = printer.extruder.temperature / temp|float %}\n{ratio}, 0.0, {1-ratio}, 0.0'}, 'display_template led_extruder_temp_progress': {'param_led_num': '0', 'param_led_total': '1', 'text': '\n{% if printer.extruder.target > 0.0 %}\n{% set temp = printer.extruder.target %}\n{% else %}\n{% set temp = printer.configfile.config.extruder.max_temp %}\n{% endif %}\n{% set ratio = printer.extruder.temperature / temp|float %}\n{% set led_ratio = param_led_num|float / param_led_total %}\n{% if ratio > led_ratio %}\n{led_ratio}, 0.0, 0.0, 0.0\n{% else %}\n0.0, 0.0, 0.0, 0.0\n{% endif %}'}, 'display_template led_bed_temp_glow': {'text': '\n{% if printer.heater_bed.target > 0.0 %}\n{% set temp = printer.heater_bed.target %}\n{% else %}\n{% set temp = printer.configfile.config.heater_bed.max_temp %}\n{% endif %}\n{% set ratio = printer.heater_bed.temperature / temp|float %}\n{ratio}, 0.0, {1-ratio}, 0.0'}, 'display_template led_bed_temp_progress': {'param_led_num': '0', 'param_led_total': '1', 'text': '\n{% if printer.heater_bed.target > 0.0 %}\n{% set temp = printer.heater_bed.target %}\n{% else %}\n{% set temp = printer.configfile.config.heater_bed.max_temp %}\n{% endif %}\n{% set ratio = printer.heater_bed.temperature / temp|float %}\n{% set led_ratio = param_led_num|float / param_led_total %}\n{% if ratio > led_ratio %}\n{led_ratio}, 0.0, 0.0, 0.0\n{% else %}\n0.0, 0.0, 0.0, 0.0\n{% endif %}'}, 'display_template led_print_percent_glow': {'text': '\n{% set ratio = printer.virtual_sdcard.progress %}\n0.0, {ratio}, 0.0, 0.0'}, 'display_template led_print_percent_progress': {'param_led_num': '0', 'param_led_total': '1', 'text': '\n{% set ratio = printer.virtual_sdcard.progress %}\n{% set led_ratio = param_led_num|float / param_led_total %}\n{% if ratio > led_ratio %}\n0.0, {led_ratio}, 0.0, 0.0\n{% else %}\n0.0, 0.0, 0.0, 0.0\n{% endif %}'}, 'display_template led_printer_speed_glow': {'text': '\n{% set ratio = printer.motion_report.live_velocity|float / printer.configfile.config.printer.max_velocity|float %}\n0.0, {ratio}, 0.0, 0.0'}, 'display_template led_printer_speed_progress': {'param_led_num': '0', 'param_led_total': '1', 'text': '\n{% set ratio = printer.motion_report.live_velocity|float / printer.configfile.config.printer.max_velocity|float %}\n{% set led_ratio = param_led_num|float / param_led_total %}\n{% if ratio > led_ratio %}\n0.0, {led_ratio}, 0.0, 0.0\n{% else %}\n0.0, 0.0, 0.0, 0.0\n{% endif %}'}, 'display_data __voron_display extruder': {'position': '0, 0', 'text': '{ render("_vheater_temperature", param_heater_name="extruder") }'}, 'display_data __voron_display fan': {'position': '0, 10', 'text': '\n{% if \'fan\' in printer %}\n{% set speed = printer.fan.speed %}\n{% if speed %}\n{% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}\n~fan{frame}~\n{% else %}\n~fan1~\n{% endif %}\n{ "{:>4.0%}".format(speed) }\n{% endif %}'}, 'display_data __voron_display bed': {'position': '1, 0', 'text': '{ render("_vheater_temperature", param_heater_name="heater_bed") }'}, 'display_data __voron_display progress_text': {'position': '1, 10', 'text': '\n{% set progress = printer.display_status.progress %}\n{ "{:^6.0%}".format(progress) }'}, 'display_data __voron_display progress_text2': {'position': '1, 10', 'text': '\n{% set progress = printer.display_status.progress %}\n{ draw_progress_bar(1, 10, 6, progress) }'}, 'display_data __voron_display printing_time': {'position': '2, 10', 'text': '\n{% set ptime = printer.idle_timeout.printing_time %}\n{ "%02d:%02d" % (ptime (60 * 60), (ptime 60) % 60) }'}, 'display_data __voron_display print_status': {'position': '3, 0', 'text': '\n{% if printer.display_status.message %}\n{ printer.display_status.message }\n{% elif printer.idle_timeout.printing_time %}\n{% set pos = printer.toolhead.position %}\n{ "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }\n{% else %}\n{ "V2.247 " }\n~voron~\n{% endif %}'}, 'display_glyph chamber': {'data': '\n................\n****************\n*....*....*....*\n*....*....*....*\n*....******....*\n*..............*\n*..............*\n*.....****.....*\n*.***.*..*.***.*\n*.....****.....*\n*......**......*\n*..............*\n*.************.*\n*...*......*...*\n****************\n................'}, 'display_glyph voron': {'data': '\n......***.......\n....*******.....\n...*********....\n.*************..\n*****..***..***.\n****..***..****.\n***..***..*****.\n**..***..******.\n******..***..**.\n*****..***..***.\n****..***..****.\n***..***..*****.\n.*************..\n...*********....\n....*******.....\n......***.......'}, 'neopixel btt_mini12864': {'pin': 'EXP1_6', 'chain_count': 3, 'color_order': ('RGB',), 'initial_red': 0.1, 'initial_green': 0.5, 'initial_blue': 0.0, 'initial_white': 0.0}, 'output_pin beeper': {'pwm': True, 'pin': 'EXP1_1', 'cycle_time': 0.0005, 'hardware_pwm': False, 'scale': 1.0, 'maximum_mcu_duration': 0.0, 'value': 0.0, 'shutdown_value': 0.0}, 'respond': {'default_type': 'echo', 'default_prefix': 'echo:'}, 'save_variables': {'filename': '~/printer_data/config/variables.cfg'}, 'gcode_macro print_start': {'gcode': '\n\n{% set bed = params.BED|default(60)|int %}\n{% set extruder = params.EXTRUDER|default(150)|int %}\n\n\n\nSET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}\nSET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extrudertemp VALUE={extruder}\n\n\n\nSETUP_VORON_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1\n\nCLEAR_PAUSE\nUPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0\n\n_RESETSPEEDS\nRESETRGB\nSET_NOZZLE_LEDS_BY_NAME COLOR="WHITE"\nSET_LOGO_LEDS_BY_NAME COLOR="WHITE"\n\nM140 S{bed}\nG28\nG90\n\n\n\n\n\n\nM190 S{bed}\nSET_LOGO_LEDS_BY_NAME COLOR="WHITE"\nQUAD_GANTRY_LEVEL\nLEVEL_BED_ADVANCED MAX_AGE=10\nM104 S{extruder}\nM109 S{extruder}\nG28 Z\n\n\nVORON_PURGE\n\nG92 E0\nG1 Z2.0 F3000\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1', 'description': 'G-Code macro', 'variable_bedtemp': '0', 'variable_extrudertemp': '0'}, 'gcode_macro print_end': {'gcode': '\nRESETRGB\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0\nCLEAR_PAUSE\n\nM400\nG92 E0\n\n\nG1 E-10.0 F3600\n\n\n\nM104 S0\nM140 S{printer["gcode_macro PRINT_START"].bedtemp|int}\n\nM107\nG91\nG1 Z5 F3000\nG90\nG1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0\nUPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600\n_RESETSPEEDS\nSAVE_IF_SET\nSET_NOZZLE_LEDS_BY_NAME COLOR="OFF"\nM84', 'description': 'G-Code macro'}, 'delayed_gcode delayed_off': {'gcode': '\nOFF', 'initial_duration': 0.0}, 'gcode_macro level_bed_advanced': {'gcode': '\n{% set max_age = params.MAX_AGE|default(10)|int %}\n{% set force_level = params.FORCE|default(0)|int %}\n{% set save = params.SAVE|default(0)|int %}\n\n{% set svv = printer.save_variables.variables %}\n{% if "level_age" not in svv %}\nSAVE_VARIABLE VARIABLE=level_age VALUE={max_age}\n{% set level_age = 1 %}\n{% else %}\n{% set level_age = svv.level_age %}\nSAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}\n{% endif %}\n{action_respond_info("Bed mesh age is " + level_age|string) + "."}\n\n{% if force_level or (level_age >= max_age|int) %}\n{action_respond_info("Bed mesh exceeded max age. Leveling...")}\n\n{% if \'xy\' not in printer.toolhead.homed_axes %}\nG28\n{% endif %}\n\nBED_MESH_CALIBRATE\n{% if save %}\nSAVE_VARIABLE VARIABLE=level_age VALUE=1\nSAVE_CONFIG\n{% else %}\nSET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1\n{% endif %}\n{% else %}\n{action_respond_info("Loading old bed mesh.")}\nBED_MESH_PROFILE LOAD=default\n{% endif %}', 'description': 'Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE', 'variable_save_at_end': '0'}, 'gcode_macro save_if_set': {'gcode': '\n{% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}\n{action_respond_info("Saving was requested - saving and restarting now.")}\nSAVE_VARIABLE VARIABLE=level_age VALUE=1\nSAVE_CONFIG\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro m600': {'gcode': '\n\nSET_LOGO_LEDS_BY_NAME COLOR="YELLOW"\nPAUSE', 'description': 'G-Code macro'}, 'delayed_gcode disablefilamentsensor': {'gcode': '\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0', 'initial_duration': 1.0}, 'gcode_macro shutdown': {'gcode': '\n\nOFF\n{action_respond_info(\'action:poweroff\')}\n{action_call_remote_method("shutdown_machine")}', 'description': 'G-Code macro'}, 'gcode_macro heatsoak': {'gcode': '\n\n{% set t = params.T|default(110)|int %}\n{% set c = params.C|default(75)|int %}\n{% set move = params.MOVE|default(1)|int %}\n{% set wait = params.WAIT|default(0)|int %}\n\nSAVE_GCODE_STATE NAME=HEATSOAK\nUPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0\n\nM104 S0\nM140 S{t}\n\n{% if move == 1 %}\nSET_LOGO_LEDS_BY_NAME COLOR=ORANGE\n_CG28\nG90\nG0 Z{printer.toolhead.axis_maximum.z/2} F19500\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500\n{% endif %}\n\n\n\n\nRESTORE_GCODE_STATE NAME=HEATSOAK', 'description': 'G-Code macro'}, 'gcode_macro _resetspeeds': {'gcode': '\nSET_VELOCITY_LIMIT VELOCITY={printer.toolhead.max_velocity}\nSET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel}\nSET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.toolhead.max_accel_to_decel}\nSET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.toolhead.square_corner_velocity}', 'description': 'G-Code macro'}, 'gcode_macro g32': {'gcode': '\n\nG28\nQUAD_GANTRY_LEVEL\nG28 Z\nG90\n\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z30 F3600', 'description': 'G-Code macro'}, 'gcode_macro beep': {'gcode': '\n\n{% set i = params.I|default(1)|int %}\n{% set dur = params.DUR|default(100)|int %}\n{% set freq = params.FREQ|default(2000)|int %}\n\n{% for iteration in range(i|int) %}\nSET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }\nG4 P{dur}\nSET_PIN PIN=beeper VALUE=0\nG4 P{dur}\n{% endfor %}', 'description': 'G-Code macro'}, 'delayed_gcode setsbrgb': {'gcode': '\nSET_LOGO_LEDS_BY_NAME COLOR="WHITE"', 'initial_duration': 1.0}, 'delayed_gcode setdisplayneopixel': {'gcode': '\nRESETRGB', 'initial_duration': 1.0}, 'gcode_macro resetrgb': {'gcode': '\n\n\nSET_LED LED=btt_mini12864 RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0\nSET_LED LED=btt_mini12864 RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0\nSET_LED LED=btt_mini12864 RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3', 'description': 'G-Code macro'}, 'gcode_macro sfs_enable': {'gcode': '\nM117 ENABLING the SFS\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1', 'description': 'Enable smart filament sensor'}, 'gcode_macro sfs_disable': {'gcode': '\nM117 DISABLING the SFS\nG92 E0\nSET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0', 'description': 'Disable smart filament sensor'}, 'gcode_macro unload_filament': {'gcode': '\nSAVE_GCODE_STATE NAME=UNLOADFILAMENT\nM83\nG1 E10 F600\nG1 E-120 F1800\nRESTORE_GCODE_STATE NAME=UNLOADFILAMENT', 'description': 'G-Code macro'}, 'gcode_macro load_filament': {'gcode': '\nSAVE_GCODE_STATE NAME=LOADFILAMENT\nM83\nG1 E100 F600\nRESTORE_GCODE_STATE NAME=LOADFILAMENT', 'description': 'G-Code macro'}, 'gcode_macro hot_unload': {'gcode': '\n\n{% set t = params.T|default(255)|int %}\n\nM104 S{t}\nPARKFRONT\nM109 S{t}\nUNLOAD_FILAMENT', 'description': 'G-Code macro'}, 'gcode_macro hot_load': {'gcode': '\n\n{% set t = params.T|default(255)|int %}\n\nM104 S{t}\nPARKFRONT\nM109 S{t}\nLOAD_FILAMENT', 'description': 'G-Code macro'}, 'gcode_macro _cg28': {'gcode': '\n{% if "xyz" not in printer.toolhead.homed_axes %}\nG28\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro _cqgl': {'gcode': '\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro parkfront': {'gcode': '\n_CG28\nSAVE_GCODE_STATE NAME=PARKFRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500\nRESTORE_GCODE_STATE NAME=PARKFRONT', 'description': 'G-Code macro'}, 'gcode_macro parkfrontlow': {'gcode': '\n_CG28\nSAVE_GCODE_STATE NAME=PARKFRONT\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500\nRESTORE_GCODE_STATE NAME=PARKFRONT', 'description': 'G-Code macro'}, 'gcode_macro parkrear': {'gcode': '\n_CG28\nSAVE_GCODE_STATE NAME=PARKREAR\nG90\nG0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500\nRESTORE_GCODE_STATE NAME=PARKREAR', 'description': 'G-Code macro'}, 'gcode_macro parkcenter': {'gcode': '\n_CG28\nSAVE_GCODE_STATE NAME=PARKCENTER\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500\nRESTORE_GCODE_STATE NAME=PARKCENTER', 'description': 'G-Code macro'}, 'gcode_macro parkbed': {'gcode': '\n_CG28\nSAVE_GCODE_STATE NAME=PARKBED\nG90\nG0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500\nRESTORE_GCODE_STATE NAME=PARKBED', 'description': 'G-Code macro'}, 'gcode_macro off': {'gcode': '\nM84\nTURN_OFF_HEATERS\n\nM107\n\nSET_NOZZLE_LEDS_BY_NAME COLOR="OFF"\nSET_LOGO_LEDS_BY_NAME COLOR="WHITE"', 'description': 'G-Code macro'}, 'gcode_macro dump_variables': {'gcode': '\n{% set filter_name = params.NAME|default(\'\')|string|lower %}\n{% set filter_value = params.VALUE|default(\'\')|string|lower %}\n{% set show_cfg = params.SHOW_CFG|default(0)|int %}\n\n{% set out = [] %}\n\n{% for key1 in printer %}\n{% for key2 in printer[key1] %}\n{% if (show_cfg or not (key1|lower == \'configfile\' and key2|lower in [\'config\', \'settings\'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}\n{% set dummy = out.append("printer[\'%s\'].%s = %s" % (key1, key2, printer[key1][key2])) %}\n{% endif %}\n{% else %}\n{% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}\n{% set dummy = out.append("printer[\'%s\'] = %s" % (key1, printer[key1])) %}\n{% endif %}\n{% endfor %}\n{% endfor %}\n\n{action_respond_info(out|join("\\n"))}', 'description': 'G-Code macro'}, 'gcode_macro get_variable': {'gcode': '\n{% set names = (params.NAME).split(\'.\')|list %}\n{% set join = (params.JOIN)|default(1)|int %}\n\n{% set _dummy0 = namespace( break = 0 ) %}\n{% set _dummy1 = namespace( out = printer[names|first] ) %}\n\n{% for name in names if _dummy0.break == 0 %}\n{% if loop.index > 1 %}\n{% if name in _dummy1.out %}\n{% set _dummy1.out = _dummy1.out[name] %}\n{% elif name[0] in \'0123456789\' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}\n{% set _dummy1.out = _dummy1.out[name|int] %}\n{% else %}\n{% set _dummy0.break = loop.index0 %}\n{% endif %}\n{% endif %}\n{% endfor %}\n\n{% if _dummy1.out is boolean %}\n{ action_respond_info(\'Type: boolean\') }\n{% elif _dummy1.out is float %}\n{ action_respond_info(\'Type: float\') }\n{% elif _dummy1.out is integer %}\n{ action_respond_info(\'Type: integer\') }\n{% elif _dummy1.out is mapping %}\n{ action_respond_info(\'Type: mapping\') }\n{% elif _dummy1.out is string %}\n{ action_respond_info(\'Type: string\') }\n{% elif _dummy1.out is iterable %}\n{ action_respond_info(\'Type: iterable\') }\n{% elif _dummy1.out is none %}\n{ action_respond_info(\'Type: none\') }\n{% elif _dummy1.out is undefined %}\n{ action_respond_info(\'Type: undefined\') }\n{% elif _dummy1.out is callable %}\n{ action_respond_info(\'Type: callable\') }\n{% else %}\n{ action_respond_info(\'Type: unknown\') }\n{% endif %}\n\n{% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}\n{ action_respond_info(\'%s\' % _dummy1.out|join("\\n")) }\n{% else %}\n{ action_respond_info(\'%s\' % _dummy1.out) }\n{% endif %}\n\n{% if _dummy0.break != 0 %}\n{ action_respond_info(\'"printer.%s" does not contain "%s"!\' % (names[0:_dummy0.break]|join(\'.\'), names[_dummy0.break])) }\n{% endif %}', 'description': 'G-Code macro'}, 'gcode_macro backup_cfg': {'gcode': '\nRUN_SHELL_COMMAND CMD=backup_cfg', 'description': 'G-Code macro'}, 'gcode_shell_command backup_cfg': {'command': 'sh /home/biqu/printer_data/config/scripts/gitbackup.sh', 'timeout': 30.0, 'verbose': True}, 'gcode_macro shaper_cal': {'gcode': '\nRUN_SHELL_COMMAND CMD=rem_res_data\nSHAPER_CALIBRATE AXIS=X FREQ_END=100\nSHAPER_CALIBRATE AXIS=Y FREQ_END=100\nRUN_SHELL_COMMAND CMD=gen_res_graph\nSAVE_CONFIG', 'description': 'G-Code macro'}, 'gcode_shell_command rem_res_data': {'command': 'sh /home/biqu/printer_data/config/scripts/rem_res_data.sh', 'timeout': 30.0, 'verbose': True}, 'gcode_shell_command gen_res_graph': {'command': 'sh /home/biqu/printer_data/config/scripts/gen_res_graph.sh', 'timeout': 30.0, 'verbose': True}, 'gcode_macro voron_purge': {'gcode': '\n\n{% if display_parameters == True %}\n{ action_respond_info("adaptive_enable : %d" % (adaptive_enable)) }\n{ action_respond_info("z_height : %f" % (z_height)) }\n{ action_respond_info("tip_distance : %f" % (tip_distance)) }\n{ action_respond_info("purge_amount : %f" % (purge_amount)) }\n{ action_respond_info("flow_rate : %f" % (flow_rate)) }\n{ action_respond_info("x_default : %f" % (x_default)) }\n{ action_respond_info("y_default : %f" % (y_default)) }\n{ action_respond_info("size : %f" % (size)) }\n{ action_respond_info("distance_to_object_x : %f" % (distance_to_object_x)) }\n{ action_respond_info("distance_to_object_y : %f" % (distance_to_object_y)) }\n{% endif %}\n\n{% if adaptive_enable == True %}\n{% set all_points = printer.exclude_object.objects | map(attribute=\'polygon\') | sum(start=[]) %}\n{% set x_origin = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x + size)) - distance_to_object_x - size %}\n{% set y_origin = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y + size)) - distance_to_object_y - size %}\n{% set x_origin = ([x_origin, 0] | max) %}\n{% set y_origin = ([y_origin, 0] | max) %}\n{% else %}\n{% set x_origin = x_default | float %}\n{% set y_origin = y_default | float %}\n{% endif %}\n{% set purge_move_speed = 2.31 * size * flow_rate / (purge_amount * 2.405) %}\n{% set prepurge_speed = flow_rate / 2.405 %}\n{% set travel_speed = printer.toolhead.max_velocity %}\n{ action_respond_info( "x: " + x_origin|string + " y: " + y_origin|string + " purge_move_speed: " + purge_move_speed|string + " prepurge_speed: " + prepurge_speed|string ) }\n\nG92 E0\nG0 F{travel_speed*60}\nG90\nG0 X{x_origin} Y{y_origin+size/2}\nG0 Z{z_height}\nM83\nG1 E{tip_distance} F{prepurge_speed*60}\nG1 X{x_origin+size*0.289} Y{y_origin+size} E{purge_amount/4} F{purge_move_speed*60}\nG1 E-.5 F2100\nG0 Z{z_height*2}\nG0 X{x_origin+size*0.789} Y{y_origin+size}\nG0 Z{z_height}\nG1 E.5 F2100\nG1 X{x_origin+size*0.211} Y{y_origin} E{purge_amount/2} F{purge_move_speed*60}\nG1 E-.5 F2100\nG0 Z{z_height*2}\nG0 X{x_origin+size*0.711} Y{y_origin}\nG0 Z{z_height}\nG1 E.5 F2100\nG1 X{x_origin+size} Y{y_origin+size/2} E{purge_amount/4} F{purge_move_speed*60}\nG1 E-.5 F2100\nG92 E0\nM82\nG0 Z{z_height*2}', 'description': 'A purge macro that adapts to be near your actual printed objects', 'variable_adaptive_enable': 'True', 'variable_z_height': '0.4', 'variable_tip_distance': '10', 'variable_purge_amount': '40', 'variable_flow_rate': '10', 'variable_x_default': '10', 'variable_y_default': '10', 'variable_size': '10', 'variable_distance_to_object_x': '10', 'variable_distance_to_object_y': '10', 'variable_display_parameters': 'True'}, 'gcode_macro setup_voron_purge': {'gcode': '\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=display_parameters VALUE={params.DISPLAY_PARAMETERS|default(True)|int}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=adaptive_enable VALUE={params.ADAPTIVE_ENABLE|default(True)|int}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=z_height VALUE={params.Z_HEIGHT|default(0.4)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=tip_distance VALUE={params.TIP_DISTANCE|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=purge_amount VALUE={params.PURGE_AMOUNT|default(40)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=flow_rate VALUE={params.FLOW_RATE|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=x_default VALUE={params.X_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=y_default VALUE={params.Y_DEFAULT|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=size VALUE={params.SIZE|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=distance_to_object_x VALUE={params.DISTANCE_TO_OBJECT_X|default(10)|float}\nSET_GCODE_VARIABLE MACRO=VORON_PURGE VARIABLE=distance_to_object_y VALUE={params.DISTANCE_TO_OBJECT_Y|default(10)|float}', 'description': 'G-Code macro'}, 'neopixel sb_leds': {'pin': 'PC6', 'chain_count': 3, 'color_order': ('GRBW',), 'initial_red': 1.0, 'initial_green': 0.0, 'initial_blue': 0.0, 'initial_white': 0.0}, 'gcode_macro _sb_vars': {'gcode': '', 'description': 'G-Code macro', 'variable_colors': "{\n'white': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 1.0},\n'red': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n'orange': {'r': 1.0, 'g': 0.25, 'b': 0.0, 'w': 0.0},\n'yellow': {'r': 1.0, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'green': {'r': 0.0, 'g': 1.0, 'b': 0.0, 'w': 0.0},\n'blue': {'r': 0.0, 'g': 0.0, 'b': 1.0, 'w': 0.0},\n'purple': {'r': 0.5, 'g': 0.0, 'b': 1.0, 'w': 0.0},\n'pink': {'r': 1.0, 'g': 0.0, 'b': 0.5, 'w': 0.0},\n'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0},\n}", 'variable_logo_led_name': '"sb_leds"', 'variable_logo_idx': '"1"', 'variable_nozzle_led_name': '"sb_leds"', 'variable_nozzle_idx': '"2,3"'}, 'gcode_macro _set_sb_leds': {'gcode': "\n{% set r = params.R|default(0)|float %}\n{% set g = params.G|default(0)|float %}\n{% set b = params.B|default(0)|float %}\n{% set w = params.W|default(0)|float %}\n{% set led = params.LED|string %}\n{% set idx = (params.IDX|string).split(',') %}\n{% set transmit_last = params.TRANSMIT|default(1) %}\n\n{% for led_index in idx %}\n{% set transmit=transmit_last if loop.last else 0 %}\nSET_LED LED={led} RED={r} GREEN={g} BLUE={b} WHITE={w} INDEX={led_index} TRANSMIT={transmit}\n{% endfor %}", 'description': 'G-Code macro'}, 'gcode_macro set_logo_leds_by_name': {'gcode': '\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _SB_VARS"].colors[color_name|lower] %}\n\n_SET_LOGO_LEDS R={color.r} G={color.g} B={color.b} W={color.w}', 'description': 'G-Code macro'}, 'gcode_macro set_nozzle_leds_by_name': {'gcode': '\n{% set color_name = params.COLOR %}\n{% set color = printer["gcode_macro _SB_VARS"].colors[color_name|lower] %}\n\n_SET_NOZZLE_LEDS R={color.r} G={color.g} B={color.b} W={color.w}', 'description': 'G-Code macro'}, 'gcode_macro _set_logo_leds': {'gcode': '\n{% set r = params.R|default(0)|float %}\n{% set g = params.G|default(0)|float %}\n{% set b = params.B|default(0)|float %}\n{% set w = params.W|default(0)|float %}\n{% set led = printer["gcode_macro _SB_VARS"].logo_led_name %}\n{% set idx = printer["gcode_macro _SB_VARS"].logo_idx %}\n\n_SET_SB_LEDS LED={led} R={r} G={g} B={b} W={w} IDX="{idx}"', 'description': 'G-Code macro'}, 'gcode_macro _set_nozzle_leds': {'gcode': '\n{% set r = params.R|default(0)|float %}\n{% set g = params.G|default(0)|float %}\n{% set b = params.B|default(0)|float %}\n{% set w = params.W|default(0)|float %}\n{% set led = printer["gcode_macro _SB_VARS"].nozzle_led_name %}\n{% set idx = printer["gcode_macro _SB_VARS"].nozzle_idx %}\n\n_SET_SB_LEDS LED={led} R={r} G={g} B={b} W={w} IDX="{idx}"', 'description': 'G-Code macro'}, 'gcode_macro led_off': {'gcode': '\nSET_LED_TEMPLATE LED=sb_leds TEMPLATE=\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_white': {'gcode': '\nSET_LED_TEMPLATE LED=sb_leds TEMPLATE=\nSET_LED LED=sb_leds RED=1 GREEN=1 BLUE=1', 'description': 'G-Code macro'}, 'gcode_macro led_red': {'gcode': '\nSET_LED_TEMPLATE LED=sb_leds TEMPLATE=\nSET_LED LED=sb_leds RED=1 GREEN=0 BLUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_green': {'gcode': '\nSET_LED_TEMPLATE LED=sb_leds TEMPLATE=\nSET_LED LED=sb_leds RED=0 GREEN=1 BLUE=0', 'description': 'G-Code macro'}, 'gcode_macro led_night': {'gcode': '\nSET_LED_TEMPLATE LED=sb_leds TEMPLATE=\nSET_LED LED=sb_leds RED=0 GREEN=0 BLUE=0.1', 'description': 'G-Code macro'}, 'gcode_macro led_progress': {'gcode': '\nNEOPIXEL_DISPLAY LED="sb_leds" TYPE=print_percent MODE=glow', 'description': 'G-Code macro'}, 'gcode_macro neopixel_display': {'gcode': "\n{% set led = params.LED %}\n{% set type = params.TYPE %}\n{% set mode = params.MODE %}\n{% set my_neopixel = printer.configfile.config['neopixel ' ~ led] %}\n\n{% if mode == 'progress' %}\n{% for i in range(my_neopixel.chain_count|int) %}\nSET_LED_TEMPLATE LED={led} INDEX={i+1} TEMPLATE={'led_' ~ type ~ '_' ~ mode} param_led_num={i+1} param_led_total={my_neopixel.chain_count|int}\n{% endfor %}\n{% endif %}\n{% if mode == 'glow' %}\nSET_LED_TEMPLATE LED={led} TEMPLATE={'led_' ~ type ~ '_' ~ mode}\n{% endif %}", 'description': 'G-Code macro'}, 'adxl345': {'axes_map': ('z', 'y', 'x'), 'rate': 3200, 'cs_pin': 'PB15', 'spi_speed': 5000000, 'spi_bus': 'spi1'}, 'resonance_tester': {'move_speed': 50.0, 'min_freq': 5.0, 'max_freq': 133.33333333333334, 'accel_per_hz': 75.0, 'hz_per_sec': 1.0, 'probe_points': ((175.0, 175.0, 10.0),), 'accel_chip': 'adxl345'}, 'input_shaper': {'shaper_type': 'mzv', 'shaper_type_x': 'mzv', 'damping_ratio_x': 0.1, 'shaper_freq_x': 51.6, 'shaper_type_y': 'mzv', 'damping_ratio_y': 0.1, 'shaper_freq_y': 36.4}, 'gcode_macro test_speed': {'gcode': '\n\n{% set speed = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}\n\n{% set iterations = params.ITERATIONS|default(5)|int %}\n\n{% set accel = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}\n\n{% set bound = params.BOUND|default(20)|int %}\n\n{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}\n\n\n\n{% set x_min = printer.toolhead.axis_minimum.x + bound %}\n{% set x_max = printer.toolhead.axis_maximum.x - bound %}\n{% set y_min = printer.toolhead.axis_minimum.y + bound %}\n{% set y_max = printer.toolhead.axis_maximum.y - bound %}\n\n\n\n{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}\n{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}\n\n\n{% set x_center_min = x_center - (smallpatternsize/2) %}\n{% set x_center_max = x_center + (smallpatternsize/2) %}\n{% set y_center_min = y_center - (smallpatternsize/2) %}\n{% set y_center_max = y_center + (smallpatternsize/2) %}\n\n\nSAVE_GCODE_STATE NAME=TEST_SPEED\n\n\n{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }\n\n\nG28\n\n{% if printer.configfile.settings.quad_gantry_level %}\n{% if printer.quad_gantry_level.applied == False %}\nQUAD_GANTRY_LEVEL\nG28 Z\n{% endif %}\n{% endif %}\n\nG90\nG1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}\nG28 X Y\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nG0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}\n\n\nSET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}\n\n{% for i in range(iterations) %}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\nG0 X{x_min} Y{y_min} F{speed*60}\nG0 X{x_min} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_max} F{speed*60}\nG0 X{x_max} Y{y_min} F{speed*60}\n\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n\n\nG0 X{x_center_min} Y{y_center_min} F{speed*60}\nG0 X{x_center_min} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_max} F{speed*60}\nG0 X{x_center_max} Y{y_center_min} F{speed*60}\n{% endfor %}\n\n\nSET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}\n\n\nG28\n\nG90\nG0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}\nG4 P1000\nGET_POSITION\n\n\nRESTORE_GCODE_STATE NAME=TEST_SPEED', 'description': 'G-Code macro'}, 'printer': {'max_velocity': 500.0, 'max_accel': 3900.0, 'max_accel_to_decel': 1950.0, 'square_corner_velocity': 5.0, 'buffer_time_low': 1.0, 'buffer_time_high': 2.0, 'buffer_time_start': 0.25, 'move_flush_time': 0.05, 'kinematics': 'corexy', 'max_z_velocity': 30.0, 'max_z_accel': 350.0}, 'force_move': {'enable_force_move': False}, 'verify_heater extruder': {'hysteresis': 5.0, 'max_error': 120.0, 'heating_gain': 2.0, 'check_gain_time': 20.0}}
printer['configfile'].warnings = []
printer['configfile'].save_config_pending = False
printer['configfile'].save_config_pending_items = {}
printer['mcu'].mcu_version = v0.10.0-623-g5b1a6676
printer['mcu'].mcu_build_versions = gcc: (15:8-2019-q3-1+b1) 8.3.1 20190703 (release) [gcc-8-branch revision 273027] binutils: (2.35.2-2+14+b2) 2.35.2
printer['mcu'].mcu_constants = {'ADC_MAX': 4095, 'BUS_PINS_i2c1_PA9_PA10': 'PA9,PA10', 'BUS_PINS_i2c1_PB6_PB7': 'PB6,PB7', 'BUS_PINS_i2c1_PB8_PB9': 'PB8,PB9', 'BUS_PINS_i2c2_PB10_PB11': 'PB10,PB11', 'BUS_PINS_i2c2_PB13_PB14': 'PB13,PB14', 'BUS_PINS_i2c3_PB3_PB4': 'PB3,PB4', 'BUS_PINS_spi1': 'PA6,PA7,PA5', 'BUS_PINS_spi1a': 'PB4,PB5,PB3', 'BUS_PINS_spi2': 'PB14,PB15,PB13', 'BUS_PINS_spi2a': 'PC2,PC3,PB10', 'BUS_PINS_spi3': 'PB4,PB5,PB3', 'CLOCK_FREQ': 64000000, 'MCU': 'stm32g0b1xx', 'PWM_MAX': 255, 'RESERVE_PINS_USB': 'PA11,PA12', 'RESERVE_PINS_crystal': 'PF0,PF1', 'STATS_SUMSQ_BASE': 256, 'STEPPER_BOTH_EDGE': 1}
printer['mcu'].last_stats = {'mcu_awake': 0.005, 'mcu_task_avg': 2e-05, 'mcu_task_stddev': 4e-05, 'bytes_write': 52142, 'bytes_read': 544636, 'bytes_retransmit': 9, 'bytes_invalid': 0, 'send_seq': 4619, 'receive_seq': 4619, 'retransmit_seq': 2, 'srtt': 0.0, 'rttvar': 0.0, 'rto': 0.025, 'ready_bytes': 0, 'stalled_bytes': 0, 'freq': 64000458}
printer['gcode_move'].speed_factor = 1.0
printer['gcode_move'].speed = 1500.0
printer['gcode_move'].extrude_factor = 1.0
printer['gcode_move'].absolute_coordinates = True
printer['gcode_move'].absolute_extrude = True
printer['gcode_move'].homing_origin = Coord(x=0.0, y=0.0, z=0.0, e=0.0)
printer['gcode_move'].position = Coord(x=0.0, y=0.0, z=0.0, e=0.0)
printer['gcode_move'].gcode_position = Coord(x=0.0, y=0.0, z=0.0, e=0.0)
printer['print_stats'].filename =
printer['print_stats'].total_duration = 0.0
printer['print_stats'].print_duration = 0.0
printer['print_stats'].filament_used = 0.0
printer['print_stats'].state = standby
printer['print_stats'].message =
printer['print_stats'].info = {'total_layer': None, 'current_layer': None}
printer['virtual_sdcard'].file_path = None
printer['virtual_sdcard'].progress = 0.0
printer['virtual_sdcard'].is_active = False
printer['virtual_sdcard'].file_position = 0
printer['virtual_sdcard'].file_size = 0
printer['pause_resume'].is_paused = False
printer['display_status'].progress = 0.0
printer['display_status'].message = None
printer['gcode_macro CANCEL_PRINT'].park = True
printer['gcode_macro PAUSE'] = {}
printer['gcode_macro RESUME'].zhop = 0
printer['gcode_macro RESUME'].etemp = 0
printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].retract_extrude = 10.0
printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude_extrude = 11.0
printer['heaters'].available_heaters = ['heater_bed', 'extruder']
printer['heaters'].available_sensors = ['temperature_sensor MCU', 'temperature_sensor SoC', 'heater_bed', 'extruder']
printer['temperature_sensor MCU'].temperature = 41.72
printer['temperature_sensor MCU'].measured_min_temp = 41.37
printer['temperature_sensor MCU'].measured_max_temp = 49.36
printer['temperature_host SoC'].temperature = 48.42
printer['temperature_sensor SoC'].temperature = 48.42
printer['temperature_sensor SoC'].measured_min_temp = 47.93
printer['temperature_sensor SoC'].measured_max_temp = 57.65
printer['stepper_enable'].steppers = {'stepper_x': False, 'stepper_y': False, 'stepper_z': False, 'stepper_z1': False, 'stepper_z2': False, 'stepper_z3': False, 'extruder': False}
printer['tmc2209 stepper_x'].mcu_phase_offset = 123
printer['tmc2209 stepper_x'].phase_offset_position = 0.384375
printer['tmc2209 stepper_x'].run_current = 0.7954951288348658
printer['tmc2209 stepper_x'].hold_current = 0.7954951288348658
printer['tmc2209 stepper_x'].drv_status = None
printer['tmc2209 stepper_y'].mcu_phase_offset = 1
printer['tmc2209 stepper_y'].phase_offset_position = 0.003125
printer['tmc2209 stepper_y'].run_current = 0.7954951288348658
printer['tmc2209 stepper_y'].hold_current = 0.7954951288348658
printer['tmc2209 stepper_y'].drv_status = None
printer['tmc2209 stepper_z'].mcu_phase_offset = 103
printer['tmc2209 stepper_z'].phase_offset_position = 0.12875
printer['tmc2209 stepper_z'].run_current = 0.7954951288348658
printer['tmc2209 stepper_z'].hold_current = 0.7954951288348658
printer['tmc2209 stepper_z'].drv_status = None
printer['tmc2209 stepper_z1'].mcu_phase_offset = 9
printer['tmc2209 stepper_z1'].phase_offset_position = 0.01125
printer['tmc2209 stepper_z1'].run_current = 0.7954951288348658
printer['tmc2209 stepper_z1'].hold_current = 0.7954951288348658
printer['tmc2209 stepper_z1'].drv_status = None
printer['tmc2209 stepper_z2'].mcu_phase_offset = 9
printer['tmc2209 stepper_z2'].phase_offset_position = 0.0225
printer['tmc2209 stepper_z2'].run_current = 0.7954951288348658
printer['tmc2209 stepper_z2'].hold_current = 0.7954951288348658
printer['tmc2209 stepper_z2'].drv_status = None
printer['tmc2209 stepper_z3'].mcu_phase_offset = 67
printer['tmc2209 stepper_z3'].phase_offset_position = 0.08375
printer['tmc2209 stepper_z3'].run_current = 0.7954951288348658
printer['tmc2209 stepper_z3'].hold_current = 0.7954951288348658
printer['tmc2209 stepper_z3'].drv_status = None
printer['tmc2209 extruder'].mcu_phase_offset = 127
printer['tmc2209 extruder'].phase_offset_position = 0.0881596917190625
printer['tmc2209 extruder'].run_current = 0.7037072293539198
printer['tmc2209 extruder'].hold_current = 0.7037072293539198
printer['tmc2209 extruder'].drv_status = None
printer['filament_motion_sensor SFS_T0'].filament_detected = True
printer['filament_motion_sensor SFS_T0'].enabled = False
printer['heater_bed'].temperature = 23.19
printer['heater_bed'].target = 0.0
printer['heater_bed'].power = 0.0
printer['probe'].last_query = False
printer['probe'].last_z_result = 0.0
printer['fan'].speed = 0.0
printer['fan'].rpm = None
printer['heater_fan hotend_fan'].speed = 0.0
printer['heater_fan hotend_fan'].rpm = None
printer['heater_fan controller_fan'].speed = 0.0
printer['heater_fan controller_fan'].rpm = None
printer['idle_timeout'].state = Ready
printer['idle_timeout'].printing_time = 0.0
printer['quad_gantry_level'].applied = False
printer['bed_mesh'].profile_name =
printer['bed_mesh'].mesh_min = (0.0, 0.0)
printer['bed_mesh'].mesh_max = (0.0, 0.0)
printer['bed_mesh'].probed_matrix = [[]]
printer['bed_mesh'].mesh_matrix = [[]]
printer['bed_mesh'].profiles = {'default': {'points': ((0.015, 0.02875, -0.03375, -0.03625, -0.0375, 0.0175, 0.02), (0.0475, 0.01625, -0.00375, -0.03, 0.00375, 0.02625, 0.04125), (0.03875, 0.03125, 0.00125, -0.0175, -0.02625, 0.01375, 0.01875), (0.065, 0.0275, 0.00625, 0.0, -0.01, 0.03125, 0.025), (0.075, 0.045, 0.04, 0.0075, 0.03625, 0.04375, 0.04125), (0.0675, 0.06, 0.0475, 0.02875, 0.0625, 0.07875, 0.03875), (0.09125, 0.09375, 0.0725, 0.065, 0.09, 0.0975, 0.11125)), 'mesh_params': OrderedDict([('min_x', 25.0), ('max_x', 334.96), ('min_y', 25.0), ('max_y', 334.96), ('x_count', 7), ('y_count', 7), ('mesh_x_pps', 2), ('mesh_y_pps', 2), ('algo', 'bicubic'), ('tension', 0.2)])}}
printer['menu'].timeout = 0
printer['menu'].running = False
printer['menu'].rows = 4
printer['menu'].cols = 16
printer['neopixel btt_mini12864'].color_data = [(1.0, 0.45, 0.4, 0.0), (0.25, 0.2, 0.15, 0.0), (0.25, 0.2, 0.15, 0.0)]
printer['output_pin beeper'].value = 0.0
printer['exclude_object'].objects = []
printer['exclude_object'].excluded_objects = []
printer['exclude_object'].current_object = None
printer['save_variables'].variables = {'level_age': 11}
printer['gcode_macro PRINT_START'].bedtemp = 0
printer['gcode_macro PRINT_START'].extrudertemp = 0
printer['gcode_macro PRINT_END'] = {}
printer['gcode_macro LEVEL_BED_ADVANCED'].save_at_end = 0
printer['gcode_macro SAVE_IF_SET'] = {}
printer['gcode_macro M600'] = {}
printer['gcode_macro SHUTDOWN'] = {}
printer['gcode_macro HEATSOAK'] = {}
printer['gcode_macro _RESETSPEEDS'] = {}
printer['gcode_macro G32'] = {}
printer['gcode_macro BEEP'] = {}
printer['gcode_macro RESETRGB'] = {}
printer['gcode_macro SFS_ENABLE'] = {}
printer['gcode_macro SFS_DISABLE'] = {}
printer['gcode_macro UNLOAD_FILAMENT'] = {}
printer['gcode_macro LOAD_FILAMENT'] = {}
printer['gcode_macro HOT_UNLOAD'] = {}
printer['gcode_macro HOT_LOAD'] = {}
printer['gcode_macro _CG28'] = {}
printer['gcode_macro _CQGL'] = {}
printer['gcode_macro PARKFRONT'] = {}
printer['gcode_macro PARKFRONTLOW'] = {}
printer['gcode_macro PARKREAR'] = {}
printer['gcode_macro PARKCENTER'] = {}
printer['gcode_macro PARKBED'] = {}
printer['gcode_macro OFF'] = {}
printer['gcode_macro DUMP_VARIABLES'] = {}
printer['gcode_macro GET_VARIABLE'] = {}
printer['gcode_macro BACKUP_CFG'] = {}
printer['gcode_macro SHAPER_CAL'] = {}
printer['gcode_macro VORON_PURGE'].adaptive_enable = True
printer['gcode_macro VORON_PURGE'].z_height = 0.4
printer['gcode_macro VORON_PURGE'].tip_distance = 10
printer['gcode_macro VORON_PURGE'].purge_amount = 40
printer['gcode_macro VORON_PURGE'].flow_rate = 10
printer['gcode_macro VORON_PURGE'].x_default = 10
printer['gcode_macro VORON_PURGE'].y_default = 10
printer['gcode_macro VORON_PURGE'].size = 10
printer['gcode_macro VORON_PURGE'].distance_to_object_x = 10
printer['gcode_macro VORON_PURGE'].distance_to_object_y = 10
printer['gcode_macro VORON_PURGE'].display_parameters = True
printer['gcode_macro SETUP_VORON_PURGE'] = {}
printer['neopixel sb_leds'].color_data = [(0.0, 0.0, 0.0, 1.0), (1.0, 0.0, 0.0, 0.0), (1.0, 0.0, 0.0, 0.0)]
printer['gcode_macro _SB_VARS'].colors = {'white': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 1.0}, 'red': {'r': 1.0, 'g': 0.0, 'b': 0.0, 'w': 0.0}, 'orange': {'r': 1.0, 'g': 0.25, 'b': 0.0, 'w': 0.0}, 'yellow': {'r': 1.0, 'g': 1.0, 'b': 0.0, 'w': 0.0}, 'green': {'r': 0.0, 'g': 1.0, 'b': 0.0, 'w': 0.0}, 'blue': {'r': 0.0, 'g': 0.0, 'b': 1.0, 'w': 0.0}, 'purple': {'r': 0.5, 'g': 0.0, 'b': 1.0, 'w': 0.0}, 'pink': {'r': 1.0, 'g': 0.0, 'b': 0.5, 'w': 0.0}, 'off': {'r': 0.0, 'g': 0.0, 'b': 0.0, 'w': 0.0}}
printer['gcode_macro _SB_VARS'].logo_led_name = sb_leds
printer['gcode_macro _SB_VARS'].logo_idx = 1
printer['gcode_macro _SB_VARS'].nozzle_led_name = sb_leds
printer['gcode_macro _SB_VARS'].nozzle_idx = 2,3
printer['gcode_macro _SET_SB_LEDS'] = {}
printer['gcode_macro SET_LOGO_LEDS_BY_NAME'] = {}
printer['gcode_macro SET_NOZZLE_LEDS_BY_NAME'] = {}
printer['gcode_macro _SET_LOGO_LEDS'] = {}
printer['gcode_macro _SET_NOZZLE_LEDS'] = {}
printer['gcode_macro LED_OFF'] = {}
printer['gcode_macro LED_WHITE'] = {}
printer['gcode_macro LED_RED'] = {}
printer['gcode_macro LED_GREEN'] = {}
printer['gcode_macro LED_NIGHT'] = {}
printer['gcode_macro LED_PROGRESS'] = {}
printer['gcode_macro NEOPIXEL_DISPLAY'] = {}
printer['gcode_macro TEST_SPEED'] = {}
printer['motion_report'].live_position = Coord(x=0.0, y=0.0, z=0.0, e=0.0)
printer['motion_report'].live_velocity = 0.0
printer['motion_report'].live_extruder_velocity = 0.0
printer['motion_report'].steppers = ['extruder', 'stepper_x', 'stepper_y', 'stepper_z', 'stepper_z1', 'stepper_z2', 'stepper_z3']
printer['motion_report'].trapq = ['extruder', 'toolhead']
printer['query_endstops'].last_query = {}
printer['system_stats'].sysload = 0.82
printer['system_stats'].cputime = 350.195793794
printer['system_stats'].memavail = 590824
printer['manual_probe'].is_active = False
printer['manual_probe'].z_position = None
printer['manual_probe'].z_position_lower = None
printer['manual_probe'].z_position_upper = None
printer['toolhead'].homed_axes =
printer['toolhead'].axis_minimum = Coord(x=0.0, y=-5.0, z=-5.0, e=0.0)
printer['toolhead'].axis_maximum = Coord(x=350.0, y=350.0, z=340.0, e=0.0)
printer['toolhead'].print_time = 9.1996674375
printer['toolhead'].stalls = 0
printer['toolhead'].estimated_print_time = 3305.378480984375
printer['toolhead'].extruder = extruder
printer['toolhead'].position = Coord(x=0.0, y=0.0, z=0.0, e=0.0)
printer['toolhead'].max_velocity = 500.0
printer['toolhead'].max_accel = 3900.0
printer['toolhead'].max_accel_to_decel = 1950.0
printer['toolhead'].square_corner_velocity = 5.0
printer['extruder'].temperature = 24.39
printer['extruder'].target = 0.0
printer['extruder'].power = 0.0
printer['extruder'].can_extrude = False
printer['extruder'].pressure_advance = 0.05
printer['extruder'].smooth_time = 0.04
printer['extruder'].motion_queue = None