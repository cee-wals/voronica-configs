# Origin: https://github.com/AndrewEllis93/v2.247_backup_klipper_config/blob/master/macros.cfg
#
# WARNING: FULLY READ MACROS BEFORE USING
# 
# Info:
#   - SuperSlicer variables and macros: https://github.com/supermerill/SuperSlicer/wiki/Macro-&-Variable-list
#   - Prusa Slicer variables (a.k.a placeholders): https://help.prusa3d.com/article/list-of-placeholders_205643
#
# Mods:
#   - Remove CHAMBER heater config; we don't have one
#
# TODOs:
#   - Enable config backup. See https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
#   - Add bed fans as "[heater_generic chamber]" in main config and then uncomment "chamber" references in gcode.
#

######################### PRINT START / END #########################
[save_variables]
filename: ~/printer_data/config/variables.cfg                                            # variable storage file
# TODO: Need to continue to tweak the filament priming and tip conditioning (extrudes/retracts before/after print)
# TODO: Add ability to select mesh profiles based on filament time. Will need to build additional bed mesh profiles; one per filament type.
# TODO: Add a timer so that we can ensure the printer has reached equilibrium. 10 to 30 minutes from cold start. Consider installing a chamber heater.
[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in other macros
variable_bedtemp: 0
variable_extrudertemp: 0
variable_printspeed: 0
#variable_chambertemp: 0
#variable_filamentType: "PLA"
gcode:      
    # Parameters
    {% set bed = params.BED|default(60)|int %}
    {% set extruder = params.EXTRUDER|default(150)|int %}                                    ; Should not set to above 150C until after homing, QGL, and bed mesh leveling. VoronTap max. nozzle temperture is 150C.
    {% set speed = params.SPEED|default(100)|int %}                                          ; Set the print speed via slicer
   # {% set chamber = params.CHAMBER|default(0)|int %}
    #{% set filamentType = params.FILAMENT_TYPE|default("")|string %}

    # Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}   
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=extrudertemp VALUE={extruder} 
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=printspeed VALUE={speed}
   # SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}
   # SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=filamentType VALUE={filamentType}

    # DEBUGGING - Show filament type. Will be using this to figure out how to load bedmesh profiles based on the selected filament.
    ;{action_respond_info("Using filament type " + filamentType + ".")}              ; DEBUGGING

    CLEAR_PAUSE                                                                          ; clear pause
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0                                       ; cancel off timer (if there is one)
    #SET_PIN PIN=caselight VALUE=1                                                        ; turn on case light
    _RESETSPEEDS                                                                         ; reset speed, accel etc to configured values
    RESETRGB                                                                             ; reset LCD RGB
    SET_NOZZLE_LEDS_BY_NAME COLOR="WHITE"                                                ; turn on nozzle LEDs
    SET_LOGO_LEDS_BY_NAME COLOR="WHITE"                                                  ; set logo LEDs back to white
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1                                           ; enable filament sensor

    M140 S{bed}                                                                          ; set bed to target temp
    M104 S150                                                                            ; Set to extruder to initial temp 150C
    G28                                                                                  ; home
    G90                                                                                  ; absolute positioning
    #{% if printer['temperature_sensor chamber'].temperature < chamber or printer.heater_bed.temperature < (bed-2)  %}
    ##{% if printer['heater_generic chamber'].temperature < chamber or printer.heater_bed.temperature < (bed-2)  %} ; (TEST)
    #    HEATSOAK T={bed} C={chamber} MOVE=1 WAIT=1                                       ;   heatsoak macro + park in center
    #{% else %}                                                                           ; - if chamber is already at temp:
    #    HEATSOAK T={bed} C={chamber} MOVE=0 WAIT=1                                       ;       "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
    #{% endif %} 
    M190 S{bed}                                                                          ; wait for bed temp
    QUAD_GANTRY_LEVEL                                                                    ; quad gantry level
    LEVEL_BED_ADVANCED MAX_AGE=1000                                                      ; Probe mesh if needed

    M109 S150                                                                            ; Wait for extruder to reach 150C, if not already at the temperature (TODO: Is this needed? have we probed enough?)
    G28 Z                                                                                ; one more Z home with hot nozzle
    M109 S{extruder}                                                                     ; set & wait for hotend final temp

    # Purge
    #VORON_PURGE
    PRIME_NOZZLE

    M83                                                                                  ; relative extruder mode
    G92 E0                                                                               ; reset Extruder
    G1 Z2.0 F3000                                                                        ; move Z Axis up
    M220 S{speed}                                                                        ; Set the print speed

[gcode_macro PRINT_END]
gcode:
    RESETRGB                                                                             ; revert LCD RGB
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0                                           ; disable filament sensor
    CLEAR_PAUSE                                                                          ; clear pause
    #M191 S0                                                                             ; (TEST) disable bed fans                                              
    M400                                                                                 ; wait for buffer to clear
    G92 E0                                                                               ; zero the extruder

    ;FILAMENT_RETRACTION_PROCEDURE        ; TODO: Why can we use _CLIENT_RETRACT    
    _CLIENT_RETRACT                                                                      ; Retract filament

    # TODO: Should this macro be used instead of the following.
    #TURN_OFF_HEATERS
    M104 S0                                                                              ; turn only the hotend off
    M140 S{printer["gcode_macro PRINT_START"].bedtemp|int}                               ; return the bed to temp, slicers like to turn it off
    
    M107                                                                                 ; turn off part cooling fan
    G91                                                                                  ; relative positioning
    G1 Z5 F3000                                                                          ; move nozzle up 5mm
    G90                                                                                  ; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x|float - 2.0} Y{printer.toolhead.axis_maximum.y|float - 2.0} F19500.0    ; park nozzle at rear                                  
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=600                                     ; turn everything off in 10 min
    _RESETSPEEDS                                                                         ; reset speed, accel etc to configured max values
    SAVE_IF_SET                                                                          ; SAVE_CONFIG if a mesh was probed in START_PRINT
    SET_NOZZLE_LEDS_BY_NAME COLOR="OFF"                                                  ; turn off nozzle LEDs
    M84                                                                                  ; Disable steppers
    #BEEP I=3                                                                            ; beep 3 times


[delayed_gcode DELAYED_OFF]
gcode:
    OFF ; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)

############################### Nozzle Priming ###############################
# TODO: Eventually get Adaptive 
[gcode_macro PRIME_NOZZLE]
gcode:
    # TODO: Does this need to change when I change the nozzle size or will klipper handle that for us
    # TODO: Use two area settings. bed_area and print_area. bed_area is the physical dimensions of the bed and print_area is the printable area used by the slicer.
    # TODO: Should we load extrusion amounts from the custom variables file. The goal would be so the PRINT_END retract distance aligns with the priming
    # TODO: Alternative, see options here https://www.reddit.com/r/klippers/comments/vr351o/purge_line_gcode/
    # Our config variables
    {% set resume_extrude = printer.save_variables.variables.resume_extrude|default(26.0)|float %}

    SAVE_GCODE_STATE NAME=PRIME_NOZZLE_STATE
    #M117 Priming
    G90                 ; Absolute coordinates.
    M83                 ; Relative extruder mode.
    G92 E0
    ; Move to start of line.
    G1 Z10 F900        ; Move up to travel
    G1 X{printer.toolhead.axis_minimum.x+5} Y{printer.toolhead.axis_minimum.y+5} F18000
    G1 Z0.2 F900       ; TODO: Compute -> layer_height
    
    ; Print the line.
    G91                ; Relative coordinates.
    G1 X100 E{resume_extrude} F1000  ; Extrude filament. TODO: Why can we use _CLIENT_EXTRUDE? _CLIENT_EXTRUDE Causes the error: Move out of range: -55.000 -2.000 0.266 [15.000]
    ;_CLIENT_EXTRUDE     ; Reload retracted filament. TODO: Needs to be re-entrant; if not retracted, then do we extrude? How to check?
    
    G1 Y-2 F1000
    G1 X-60 E9 F1000    ; Print second part of the line.
    G1 E-0.5 F3000      ; Retract to avoid stringing.
    G1 X0.5 E0 F1000    ; Wipe back to break string.
    G1 X-5.5 E0 F1000   ; Wipe forward to break string.

    # TODO: Do we need to move the z-axis back or will RESTORE_GCODE_STATE handle that?
    #G90                 ; Absolute coordinates.
    RESTORE_GCODE_STATE NAME=PRIME_NOZZLE_STATE

######################### BED MESH LEVELING (ADV.) #########################
; This is where the magic happens:
; MAX_AGE is checked against the stored variable
; SAVE=1 can be used to force saving the mesh (restarts klipper, so
;        only for manual usage)
; FORCE_LEVEL=1 forces a mesh probe even if MAX_AGE is not reached
; origin: https://www.reddit.com/r/klippers/comments/qdr0g9/my_gcode_macro_to_mesh_level_the_bed_every_10th/
[gcode_macro LEVEL_BED_ADVANCED]
description: Levels the bed if the last leveling was MAX_AGE runs ago. Force leveling by setting FORCE
variable_save_at_end: 0
gcode:
  {% set max_age = params.MAX_AGE|default(10)|int %}
  {% set force_level = params.FORCE|default(0)|int %}
  {% set save = params.SAVE|default(0)|int %}

  ; load level_age from stored variables
  {% set svv = printer.save_variables.variables %}
  {% if "level_age" not in svv %} ; first run
    SAVE_VARIABLE VARIABLE=level_age VALUE={max_age}
    {% set level_age = 1 %}
  {% else %} ; load level_age and increment
    {% set level_age = svv.level_age %}
    SAVE_VARIABLE VARIABLE=level_age VALUE={level_age|int + 1}
  {% endif %}
  {action_respond_info("Bed mesh age is " + level_age|string + ".")} 

  ; Level eventually
  {% if force_level or (level_age >= max_age|int) %}
    {action_respond_info("Bed mesh exceeded max age. Leveling...")} 

    ; homing if not homed yet
    {% if 'xy' not in printer.toolhead.homed_axes %}
    G28
    {% endif %}
  
    BED_MESH_CALIBRATE
    {% if save %}
      SAVE_VARIABLE VARIABLE=level_age VALUE=1 ; reset counter
      SAVE_CONFIG
    {% else %}
      SET_GCODE_VARIABLE MACRO=LEVEL_BED_ADVANCED VARIABLE=save_at_end VALUE=1
    {% endif %}
  {% else %}
    {action_respond_info("Loading old bed mesh.")} 
    BED_MESH_PROFILE LOAD=default
  {% endif %} 

# runs SAVE_CONFIG if the g-code variable was set in start gcode
[gcode_macro SAVE_IF_SET]
gcode:
    {% if printer["gcode_macro LEVEL_BED_ADVANCED"].save_at_end == 1 %}
    {action_respond_info("Saving was requested - saving and restarting now.")}
      SAVE_VARIABLE VARIABLE=level_age VALUE=1
      SAVE_CONFIG
    {% endif %}

######################### PAUSE/RESUME/CANCEL #########################

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print.
rename_existing: BASE_CANCEL_PRINT
gcode:
    BASE_CANCEL_PRINT
    RESETRGB                                                                             ; revert LCD RGB
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0                                           ; disable filament sensor
    SET_NOZZLE_LEDS_BY_NAME COLOR="OFF"                                                  ; turn off nozzle LEDs
    SAVE_IF_SET                                                                          ; Save bed mesh state if it was set

[gcode_macro PAUSE]
description: Pause the actual running print. Pause and park toolhead at front left. Z hop by 15mm.
rename_existing: BASE_PAUSE
gcode:
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0                                          ; disable filament sensor       
    BASE_PAUSE
    M117 Print Paused
    GET_POSITION

[gcode_macro RESUME]
description: Resume the paused print. Return Z hop back down, prime nozzle, resume print.
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1                                                                       ; enable filament sensor
    RESETRGB                                                                                                         ; reset LCD color
    SET_LOGO_LEDS_BY_NAME COLOR="WHITE"                                                                              ; set logo LEDs back to white
    BASE_RESUME                                                                                                      ; resume print
    M117                                                                                                             ; Clear the status message on the LCD. Also see "SET_DISPLAY_TEXT MSG=<message>"; leaving "MSG" blank clear the current message on the LCD.

[gcode_macro M600]
description: Change filament and filament runount
gcode:
    #LCDRGB R=0 G=1 B=0                  # Turn LCD green
    SET_LOGO_LEDS_BY_NAME COLOR="YELLOW" # Turn logo green
    PAUSE X=10 Y=5 Z_MIN=50 
    
# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END, and in PAUSE/RESUME)
[delayed_gcode DISABLEFILAMENTSENSOR]   
initial_duration: 1
gcode:
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0
    

######################### MISC #########################

# Calls my "OFF" macro to shut off everything (lights etc), turns off LCD lighting, then shuts down the Pi
[gcode_macro SHUTDOWN]
gcode:
    #LCDRGB R=0 G=0 B=0
    OFF
    {action_respond_info('action:poweroff')}          ; OctoPrint compatible
    {action_call_remote_method("shutdown_machine")}   ; Moonraker compatible

[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set t = params.T|default(110)|int %}
    {% set c = params.C|default(75)|int %}
    {% set move = params.MOVE|default(1)|int %}
    {% set wait = params.WAIT|default(0)|int %}

    SAVE_GCODE_STATE NAME=HEATSOAK
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0    ; cancel off timer (if there is one)
    #SET_PIN PIN=caselight VALUE=1                     ; turn on case light
    M104 S0                                           ; turn off hotend
    M140 S{t}                                         ; heat bed
    #M141 S{c}                                         ; (TEST) start bed fans 
    {% if move == 1 %}
        SET_LOGO_LEDS_BY_NAME COLOR=ORANGE            ; set logo to orange
        _CG28
        G90
        G0 Z{printer.toolhead.axis_maximum.z/2} F19500    
        G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500    
    {% endif %}
    #{% if c > 30 and wait == 1 %}
        ##TEMPERATURE_WAIT SENSOR="heater_generic chamber" MINIMUM={c-10} ; (TEST) wait for chamber temp - 10C
        #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={c-10} ; wait for chamber temp - 10C
    #{% endif %}
    RESTORE_GCODE_STATE NAME=HEATSOAK

# cwilder: This could be the cause for the extruder hotend temperature not getting set and waited on.
# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off
# [gcode_macro M109]
# rename_existing: M99109
# gcode:
#     #Parameters
#     {% set s = params.S|float %}

#     M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
#     {% if s != 0 %}
#         TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
#     {% endif %}

[gcode_macro _RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.toolhead.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.toolhead.max_accel}  
    SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={printer.toolhead.minimum_cruise_ratio} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.toolhead.square_corner_velocity} 

    M220 S100                      ; Reset the print speed to 100%

[gcode_macro G32]
description: Initialize the printer axis. Up to the user to heatsoak the bed and prime the nozzle.
gcode:
    # TODO: Make bedmesh profile a GCode Parameter
    
    G28
    QUAD_GANTRY_LEVEL
    {% if printer.bed_mesh.profiles and 'default' in printer.bed_mesh.profiles.keys() %}
      BED_MESH_PROFILE LOAD=default
    {% else %}
      BED_MESH_CALIBRATE
      BED_MESH_PROFILE SAVE=default
    {% endif %}
    
    G28 Z
    G90                                 ; absolute positioning
    # for 350mm build
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z30 F3600

[gcode_macro BEEP]
gcode:
    # Parameters
    {% set i = params.I|default(1)|int %}           ; Iterations (number of times to beep).
    {% set dur = params.DUR|default(100)|int %}     ; Duration/wait of each beep in ms. Default 100ms.
    {% set freq = params.FREQ|default(2000)|int %}  ; Frequency in Hz. Default 2kHz.

    {% for iteration in range(i|int) %}
        SET_PIN PIN=beeper VALUE=0.8 CYCLE_TIME={ 1.0/freq if freq > 0 else 1 }
        G4 P{dur}
        SET_PIN PIN=beeper VALUE=0
        G4 P{dur}
    {% endfor %}
    
######################### LCD / RGB CONTROLS #########################

# Set SB RGB at startup
[delayed_gcode SETSBRGB]
initial_duration: 1
gcode:
    SET_LOGO_LEDS_BY_NAME COLOR="WHITE"

# Set LCD RGB at startup
[delayed_gcode SETDISPLAYNEOPIXEL]
initial_duration: 1
gcode:
    RESETRGB

# Default RGB
[gcode_macro RESETRGB]
gcode:
    ##	Sets RGB values on boot up for each Neopixel. 
    ##	Index 1 = display, Index 2 and 3 = Knob
    SET_LED LED=btt_mini12864 RED=1 GREEN=0.45 BLUE=0.4 INDEX=1 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=2 TRANSMIT=0
    SET_LED LED=btt_mini12864 RED=0.25 GREEN=0.2 BLUE=0.15 INDEX=3
    # SET_LED LED=btt_mini12864 RED=1 GREEN=1 BLUE=1 INDEX=1 TRANSMIT=0
    # SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
    # SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3 

# Example LCDRGB R=1 G=0.5 B=0
#[gcode_macro LCDRGB]
#gcode:
#    {% set r = params.R|default(1)|float %}
#    {% set g = params.G|default(1)|float %}
#    {% set b = params.B|default(1)|float %}
#
#    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=1 TRANSMIT=0
#    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=2 TRANSMIT=0
#    SET_LED LED=btt_mini12864 RED={r} GREEN={g} BLUE={b} INDEX=3
    
######################### FILAMENT #########################
[gcode_macro SFS_ENABLE] ; Add this to PRINT_START. Shortcut for manually enabling 
description: Enable smart filament sensor
gcode:
    M117 ENABLING the SFS
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=1 ; Put your filament sensor's name after SENSOR=

[gcode_macro SFS_DISABLE] ; Add this to PRINT_END and PRINT_CANCEL. Shortcut from manually disabling
description: Disable smart filament sensor 
gcode:
    M117 DISABLING the SFS
    G92 E0
    SET_FILAMENT_SENSOR SENSOR=SFS_T0 ENABLE=0 ; Put your filament sensor's name after SENSOR=

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOADFILAMENT
    M83                                   ; set extruder to relative
    G1 E10 F600                           ; extrude a little to soften tip 
    G1 E-120 F1800                        ; retract filament completely
    RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOADFILAMENT
    M83 ; set extruder to relative
    G1 E100 F600
    RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
    # Parameters
    {% set t = params.T|default(255)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    UNLOAD_FILAMENT
    
[gcode_macro HOT_LOAD]
gcode:
    # Parameters
    {% set t = params.T|default(255)|int %}
    
    M104 S{t}
    PARKFRONT
    M109 S{t}
    LOAD_FILAMENT

######################### CONDITIONALS #########################

# Conditional G28 (home if not already homed)
[gcode_macro _CG28]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro _CQGL]
gcode:
    {% if printer.quad_gantry_level.applied == False %}
        _CG28
        QUAD_GANTRY_LEVEL
        G28 Z
    {% endif %}
    
######################### PARKING #########################

# Park front center
[gcode_macro PARKFRONT]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500        
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT
    
# Park top rear left
[gcode_macro PARKREAR]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKREAR
    G90
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500    
    RESTORE_GCODE_STATE NAME=PARKCENTER
    
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    _CG28
    SAVE_GCODE_STATE NAME=PARKBED
    G90
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500                                     
    RESTORE_GCODE_STATE NAME=PARKBED
    
######################### ALIASES/SHORTCUTS #########################

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
    M84                                  ; turn steppers off
    TURN_OFF_HEATERS                     ; turn bed / hotend off
    #M141 S0                              ; (TEST) turn off bed fans
    M107                                 ; turn print cooling fan off
    #SET_PIN PIN=caselight VALUE=0        ; turn light off
    SET_NOZZLE_LEDS_BY_NAME COLOR="OFF"  ; turn nozzle LEDs off
    SET_LOGO_LEDS_BY_NAME COLOR="WHITE"  ; set logo LED back to white
    
######################### TESTING #########################

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro GET_VARIABLE]
gcode:
    {% set names = (params.NAME).split('.')|list %}
    {% set join = (params.JOIN)|default(1)|int %}
    
    {% set _dummy0 = namespace( break = 0 ) %}
    {% set _dummy1 = namespace( out = printer[names|first] ) %}
    
    {% for name in names if _dummy0.break == 0 %}
        {% if loop.index > 1 %}
            {% if name in _dummy1.out %}
                {% set _dummy1.out = _dummy1.out[name] %}
            {% elif name[0] in '0123456789' and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping and _dummy1.out|length > name[0]|int %}
                {% set _dummy1.out = _dummy1.out[name|int] %}
            {% else %}
                {% set _dummy0.break = loop.index0 %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    {% if _dummy1.out is boolean %}
        { action_respond_info('Type: boolean') }
    {% elif _dummy1.out is float %}
        { action_respond_info('Type: float') }
    {% elif _dummy1.out is integer %}
        { action_respond_info('Type: integer') }
    {% elif _dummy1.out is mapping %}
        { action_respond_info('Type: mapping') }
    {% elif _dummy1.out is string %}
        { action_respond_info('Type: string') }
    {% elif _dummy1.out is iterable %}
        { action_respond_info('Type: iterable') }
    {% elif _dummy1.out is none %}
        { action_respond_info('Type: none') }
    {% elif _dummy1.out is undefined %}
        { action_respond_info('Type: undefined') }
    {% elif _dummy1.out is callable %}
        { action_respond_info('Type: callable') }
    {% else %}
        { action_respond_info('Type: unknown') }
    {% endif %}
    
    {% if join and _dummy1.out is iterable and _dummy1.out is not string and _dummy1.out is not mapping %}
        { action_respond_info('%s' % _dummy1.out|join("\n")) }
    {% else %}
        { action_respond_info('%s' % _dummy1.out) }
    {% endif %}
    
    {% if _dummy0.break != 0 %}
        { action_respond_info('"printer.%s" does not contain "%s"!' % (names[0:_dummy0.break]|join('.'), names[_dummy0.break])) }
    {% endif %}


######################### Calibration Macros #########################

# *-* TEST_SPEED *-*
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO=0

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/minimum_cruise_ratio to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED

######################### Experimental Macros #########################
# DEPRECATED: Using _CLIENT_RETRACT from "mainsail.cfg", which is supposed to be main retract macro, but caused issues originally.
[gcode_macro FILAMENT_RETRACTION_PROCEDURE]
description: Filament retraction procedure that uses ramming to shape the filament tip to prevent jams.
gcode:
    # Our config variables
    {% set retract_extrude = printer.save_variables.variables.end_pause_retract|default(25.0)|float %}
    {% if printer.extruder.can_extrude|lower == 'true' %}
        M83                                                                                ; relative extrusion distance

        ; Ramming Procedure for Retrations
        G1 E-6 F800
        G1 E5 F600
        G1 E-10 F800
        G1 E9 F600
        G1 E-{retract_extrude - 2} F800
        
        {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
    {% else %}
      {action_respond_info("Extruder not hot enough. Skipping retraction")}
    {% endif %}

